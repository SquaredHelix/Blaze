declare enum EntityCategory {
	NONE,
	UNDEAD,
	ARTHROPOD,
	ILLAGER,
	WATER,
}
namespace EntityCategory {
	function values(): EntityCategory[]
	function valueOf(arg0: String): EntityCategory
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum StructureRotation {
	NONE,
	CLOCKWISE_90,
	CLOCKWISE_180,
	COUNTERCLOCKWISE_90,
}
namespace StructureRotation {
	function values(): StructureRotation[]
	function valueOf(arg0: String): StructureRotation
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum TreeType {
	TREE,
	BIG_TREE,
	REDWOOD,
	TALL_REDWOOD,
	BIRCH,
	JUNGLE,
	SMALL_JUNGLE,
	COCOA_TREE,
	JUNGLE_BUSH,
	RED_MUSHROOM,
	BROWN_MUSHROOM,
	SWAMP,
	ACACIA,
	DARK_OAK,
	MEGA_REDWOOD,
	TALL_BIRCH,
	CHORUS_PLANT,
	CRIMSON_FUNGUS,
	WARPED_FUNGUS,
	AZALEA,
	MANGROVE,
	TALL_MANGROVE,
}
namespace TreeType {
	function values(): TreeType[]
	function valueOf(arg0: String): TreeType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum PatternType {
	BASE,
	SQUARE_BOTTOM_LEFT,
	SQUARE_BOTTOM_RIGHT,
	SQUARE_TOP_LEFT,
	SQUARE_TOP_RIGHT,
	STRIPE_BOTTOM,
	STRIPE_TOP,
	STRIPE_LEFT,
	STRIPE_RIGHT,
	STRIPE_CENTER,
	STRIPE_MIDDLE,
	STRIPE_DOWNRIGHT,
	STRIPE_DOWNLEFT,
	STRIPE_SMALL,
	CROSS,
	STRAIGHT_CROSS,
	TRIANGLE_BOTTOM,
	TRIANGLE_TOP,
	TRIANGLES_BOTTOM,
	TRIANGLES_TOP,
	DIAGONAL_LEFT,
	DIAGONAL_RIGHT,
	DIAGONAL_LEFT_MIRROR,
	DIAGONAL_RIGHT_MIRROR,
	CIRCLE_MIDDLE,
	RHOMBUS_MIDDLE,
	HALF_VERTICAL,
	HALF_HORIZONTAL,
	HALF_VERTICAL_MIRROR,
	HALF_HORIZONTAL_MIRROR,
	BORDER,
	CURLY_BORDER,
	CREEPER,
	GRADIENT,
	GRADIENT_UP,
	BRICKS,
	SKULL,
	FLOWER,
	MOJANG,
	GLOBE,
	PIGLIN,
}
namespace PatternType {
	function values(): PatternType[]
	function valueOf(arg0: String): PatternType
	function getIdentifier(): String
	function getByIdentifier(arg0: String): PatternType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum CacheStrategy {
	CACHE_AFTER_FIRST_EVAL,
	NEVER_CACHE,
	CACHE_ETERNALLY,
}
namespace CacheStrategy {
	function values(): CacheStrategy[]
	function valueOf(arg0: String): CacheStrategy
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Shape {
	NORTH_SOUTH,
	EAST_WEST,
	ASCENDING_EAST,
	ASCENDING_WEST,
	ASCENDING_NORTH,
	ASCENDING_SOUTH,
	SOUTH_EAST,
	SOUTH_WEST,
	NORTH_WEST,
	NORTH_EAST,
}
namespace Shape {
	function values(): Shape[]
	function valueOf(arg0: String): Shape
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum TreeSpecies {
	GENERIC,
	REDWOOD,
	BIRCH,
	JUNGLE,
	ACACIA,
	DARK_OAK,
}
namespace TreeSpecies {
	function values(): TreeSpecies[]
	function valueOf(arg0: String): TreeSpecies
	function getByData(arg0: byte): TreeSpecies
	function getData(): byte
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Connection {
	UP,
	SIDE,
	NONE,
}
namespace Connection {
	function values(): Connection[]
	function valueOf(arg0: String): Connection
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum EnchantmentTarget {
	ALL,
	ARMOR,
	ARMOR_FEET,
	ARMOR_LEGS,
	ARMOR_TORSO,
	ARMOR_HEAD,
	WEAPON,
	TOOL,
	BOW,
	FISHING_ROD,
	BREAKABLE,
	WEARABLE,
	TRIDENT,
	CROSSBOW,
	VANISHABLE,
}
namespace EnchantmentTarget {
	function values(): EnchantmentTarget[]
	function valueOf(arg0: String): EnchantmentTarget
	function includes(arg0: ItemStack): boolean
	function includes(arg0: Material): boolean
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	OAK,
	SPRUCE,
	BIRCH,
	JUNGLE,
	ACACIA,
	DARK_OAK,
	MANGROVE,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function getMaterial(): Material
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum BarColor {
	PINK,
	BLUE,
	RED,
	GREEN,
	YELLOW,
	PURPLE,
	WHITE,
}
namespace BarColor {
	function values(): BarColor[]
	function valueOf(arg0: String): BarColor
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Property {
	BREW_TIME,
	FUEL_TIME,
	BURN_TIME,
	TICKS_FOR_CURRENT_FUEL,
	COOK_TIME,
	TICKS_FOR_CURRENT_SMELTING,
	ENCHANT_BUTTON1,
	ENCHANT_BUTTON2,
	ENCHANT_BUTTON3,
	ENCHANT_XP_SEED,
	ENCHANT_ID1,
	ENCHANT_ID2,
	ENCHANT_ID3,
	ENCHANT_LEVEL1,
	ENCHANT_LEVEL2,
	ENCHANT_LEVEL3,
	LEVELS,
	PRIMARY_EFFECT,
	SECONDARY_EFFECT,
	REPAIR_COST,
	BOOK_PAGE,
}
namespace Property {
	function values(): Property[]
	function valueOf(arg0: String): Property
	function getId(): int
	function getType(): InventoryType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum EquipmentSlot {
	HAND,
	OFF_HAND,
	FEET,
	LEGS,
	CHEST,
	HEAD,
}
namespace EquipmentSlot {
	function values(): EquipmentSlot[]
	function valueOf(arg0: String): EquipmentSlot
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Tilt {
	NONE,
	UNSTABLE,
	PARTIAL,
	FULL,
}
namespace Tilt {
	function values(): Tilt[]
	function valueOf(arg0: String): Tilt
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum RegainReason {
	REGEN,
	SATIATED,
	EATING,
	ENDER_CRYSTAL,
	MAGIC,
	MAGIC_REGEN,
	WITHER_SPAWN,
	WITHER,
	CUSTOM,
}
namespace RegainReason {
	function values(): RegainReason[]
	function valueOf(arg0: String): RegainReason
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Material {
	AIR,
	STONE,
	GRANITE,
	POLISHED_GRANITE,
	DIORITE,
	POLISHED_DIORITE,
	ANDESITE,
	POLISHED_ANDESITE,
	DEEPSLATE,
	COBBLED_DEEPSLATE,
	POLISHED_DEEPSLATE,
	CALCITE,
	TUFF,
	DRIPSTONE_BLOCK,
	GRASS_BLOCK,
	DIRT,
	COARSE_DIRT,
	PODZOL,
	ROOTED_DIRT,
	MUD,
	CRIMSON_NYLIUM,
	WARPED_NYLIUM,
	COBBLESTONE,
	OAK_PLANKS,
	SPRUCE_PLANKS,
	BIRCH_PLANKS,
	JUNGLE_PLANKS,
	ACACIA_PLANKS,
	DARK_OAK_PLANKS,
	MANGROVE_PLANKS,
	CRIMSON_PLANKS,
	WARPED_PLANKS,
	OAK_SAPLING,
	SPRUCE_SAPLING,
	BIRCH_SAPLING,
	JUNGLE_SAPLING,
	ACACIA_SAPLING,
	DARK_OAK_SAPLING,
	MANGROVE_PROPAGULE,
	BEDROCK,
	SAND,
	RED_SAND,
	GRAVEL,
	COAL_ORE,
	DEEPSLATE_COAL_ORE,
	IRON_ORE,
	DEEPSLATE_IRON_ORE,
	COPPER_ORE,
	DEEPSLATE_COPPER_ORE,
	GOLD_ORE,
	DEEPSLATE_GOLD_ORE,
	REDSTONE_ORE,
	DEEPSLATE_REDSTONE_ORE,
	EMERALD_ORE,
	DEEPSLATE_EMERALD_ORE,
	LAPIS_ORE,
	DEEPSLATE_LAPIS_ORE,
	DIAMOND_ORE,
	DEEPSLATE_DIAMOND_ORE,
	NETHER_GOLD_ORE,
	NETHER_QUARTZ_ORE,
	ANCIENT_DEBRIS,
	COAL_BLOCK,
	RAW_IRON_BLOCK,
	RAW_COPPER_BLOCK,
	RAW_GOLD_BLOCK,
	AMETHYST_BLOCK,
	BUDDING_AMETHYST,
	IRON_BLOCK,
	COPPER_BLOCK,
	GOLD_BLOCK,
	DIAMOND_BLOCK,
	NETHERITE_BLOCK,
	EXPOSED_COPPER,
	WEATHERED_COPPER,
	OXIDIZED_COPPER,
	CUT_COPPER,
	EXPOSED_CUT_COPPER,
	WEATHERED_CUT_COPPER,
	OXIDIZED_CUT_COPPER,
	CUT_COPPER_STAIRS,
	EXPOSED_CUT_COPPER_STAIRS,
	WEATHERED_CUT_COPPER_STAIRS,
	OXIDIZED_CUT_COPPER_STAIRS,
	CUT_COPPER_SLAB,
	EXPOSED_CUT_COPPER_SLAB,
	WEATHERED_CUT_COPPER_SLAB,
	OXIDIZED_CUT_COPPER_SLAB,
	WAXED_COPPER_BLOCK,
	WAXED_EXPOSED_COPPER,
	WAXED_WEATHERED_COPPER,
	WAXED_OXIDIZED_COPPER,
	WAXED_CUT_COPPER,
	WAXED_EXPOSED_CUT_COPPER,
	WAXED_WEATHERED_CUT_COPPER,
	WAXED_OXIDIZED_CUT_COPPER,
	WAXED_CUT_COPPER_STAIRS,
	WAXED_EXPOSED_CUT_COPPER_STAIRS,
	WAXED_WEATHERED_CUT_COPPER_STAIRS,
	WAXED_OXIDIZED_CUT_COPPER_STAIRS,
	WAXED_CUT_COPPER_SLAB,
	WAXED_EXPOSED_CUT_COPPER_SLAB,
	WAXED_WEATHERED_CUT_COPPER_SLAB,
	WAXED_OXIDIZED_CUT_COPPER_SLAB,
	OAK_LOG,
	SPRUCE_LOG,
	BIRCH_LOG,
	JUNGLE_LOG,
	ACACIA_LOG,
	DARK_OAK_LOG,
	MANGROVE_LOG,
	MANGROVE_ROOTS,
	MUDDY_MANGROVE_ROOTS,
	CRIMSON_STEM,
	WARPED_STEM,
	STRIPPED_OAK_LOG,
	STRIPPED_SPRUCE_LOG,
	STRIPPED_BIRCH_LOG,
	STRIPPED_JUNGLE_LOG,
	STRIPPED_ACACIA_LOG,
	STRIPPED_DARK_OAK_LOG,
	STRIPPED_MANGROVE_LOG,
	STRIPPED_CRIMSON_STEM,
	STRIPPED_WARPED_STEM,
	STRIPPED_OAK_WOOD,
	STRIPPED_SPRUCE_WOOD,
	STRIPPED_BIRCH_WOOD,
	STRIPPED_JUNGLE_WOOD,
	STRIPPED_ACACIA_WOOD,
	STRIPPED_DARK_OAK_WOOD,
	STRIPPED_MANGROVE_WOOD,
	STRIPPED_CRIMSON_HYPHAE,
	STRIPPED_WARPED_HYPHAE,
	OAK_WOOD,
	SPRUCE_WOOD,
	BIRCH_WOOD,
	JUNGLE_WOOD,
	ACACIA_WOOD,
	DARK_OAK_WOOD,
	MANGROVE_WOOD,
	CRIMSON_HYPHAE,
	WARPED_HYPHAE,
	OAK_LEAVES,
	SPRUCE_LEAVES,
	BIRCH_LEAVES,
	JUNGLE_LEAVES,
	ACACIA_LEAVES,
	DARK_OAK_LEAVES,
	MANGROVE_LEAVES,
	AZALEA_LEAVES,
	FLOWERING_AZALEA_LEAVES,
	SPONGE,
	WET_SPONGE,
	GLASS,
	TINTED_GLASS,
	LAPIS_BLOCK,
	SANDSTONE,
	CHISELED_SANDSTONE,
	CUT_SANDSTONE,
	COBWEB,
	GRASS,
	FERN,
	AZALEA,
	FLOWERING_AZALEA,
	DEAD_BUSH,
	SEAGRASS,
	SEA_PICKLE,
	WHITE_WOOL,
	ORANGE_WOOL,
	MAGENTA_WOOL,
	LIGHT_BLUE_WOOL,
	YELLOW_WOOL,
	LIME_WOOL,
	PINK_WOOL,
	GRAY_WOOL,
	LIGHT_GRAY_WOOL,
	CYAN_WOOL,
	PURPLE_WOOL,
	BLUE_WOOL,
	BROWN_WOOL,
	GREEN_WOOL,
	RED_WOOL,
	BLACK_WOOL,
	DANDELION,
	POPPY,
	BLUE_ORCHID,
	ALLIUM,
	AZURE_BLUET,
	RED_TULIP,
	ORANGE_TULIP,
	WHITE_TULIP,
	PINK_TULIP,
	OXEYE_DAISY,
	CORNFLOWER,
	LILY_OF_THE_VALLEY,
	WITHER_ROSE,
	SPORE_BLOSSOM,
	BROWN_MUSHROOM,
	RED_MUSHROOM,
	CRIMSON_FUNGUS,
	WARPED_FUNGUS,
	CRIMSON_ROOTS,
	WARPED_ROOTS,
	NETHER_SPROUTS,
	WEEPING_VINES,
	TWISTING_VINES,
	SUGAR_CANE,
	KELP,
	MOSS_CARPET,
	MOSS_BLOCK,
	HANGING_ROOTS,
	BIG_DRIPLEAF,
	SMALL_DRIPLEAF,
	BAMBOO,
	OAK_SLAB,
	SPRUCE_SLAB,
	BIRCH_SLAB,
	JUNGLE_SLAB,
	ACACIA_SLAB,
	DARK_OAK_SLAB,
	MANGROVE_SLAB,
	CRIMSON_SLAB,
	WARPED_SLAB,
	STONE_SLAB,
	SMOOTH_STONE_SLAB,
	SANDSTONE_SLAB,
	CUT_SANDSTONE_SLAB,
	PETRIFIED_OAK_SLAB,
	COBBLESTONE_SLAB,
	BRICK_SLAB,
	STONE_BRICK_SLAB,
	MUD_BRICK_SLAB,
	NETHER_BRICK_SLAB,
	QUARTZ_SLAB,
	RED_SANDSTONE_SLAB,
	CUT_RED_SANDSTONE_SLAB,
	PURPUR_SLAB,
	PRISMARINE_SLAB,
	PRISMARINE_BRICK_SLAB,
	DARK_PRISMARINE_SLAB,
	SMOOTH_QUARTZ,
	SMOOTH_RED_SANDSTONE,
	SMOOTH_SANDSTONE,
	SMOOTH_STONE,
	BRICKS,
	BOOKSHELF,
	MOSSY_COBBLESTONE,
	OBSIDIAN,
	TORCH,
	END_ROD,
	CHORUS_PLANT,
	CHORUS_FLOWER,
	PURPUR_BLOCK,
	PURPUR_PILLAR,
	PURPUR_STAIRS,
	SPAWNER,
	CHEST,
	CRAFTING_TABLE,
	FARMLAND,
	FURNACE,
	LADDER,
	COBBLESTONE_STAIRS,
	SNOW,
	ICE,
	SNOW_BLOCK,
	CACTUS,
	CLAY,
	JUKEBOX,
	OAK_FENCE,
	SPRUCE_FENCE,
	BIRCH_FENCE,
	JUNGLE_FENCE,
	ACACIA_FENCE,
	DARK_OAK_FENCE,
	MANGROVE_FENCE,
	CRIMSON_FENCE,
	WARPED_FENCE,
	PUMPKIN,
	CARVED_PUMPKIN,
	JACK_O_LANTERN,
	NETHERRACK,
	SOUL_SAND,
	SOUL_SOIL,
	BASALT,
	POLISHED_BASALT,
	SMOOTH_BASALT,
	SOUL_TORCH,
	GLOWSTONE,
	INFESTED_STONE,
	INFESTED_COBBLESTONE,
	INFESTED_STONE_BRICKS,
	INFESTED_MOSSY_STONE_BRICKS,
	INFESTED_CRACKED_STONE_BRICKS,
	INFESTED_CHISELED_STONE_BRICKS,
	INFESTED_DEEPSLATE,
	STONE_BRICKS,
	MOSSY_STONE_BRICKS,
	CRACKED_STONE_BRICKS,
	CHISELED_STONE_BRICKS,
	PACKED_MUD,
	MUD_BRICKS,
	DEEPSLATE_BRICKS,
	CRACKED_DEEPSLATE_BRICKS,
	DEEPSLATE_TILES,
	CRACKED_DEEPSLATE_TILES,
	CHISELED_DEEPSLATE,
	REINFORCED_DEEPSLATE,
	BROWN_MUSHROOM_BLOCK,
	RED_MUSHROOM_BLOCK,
	MUSHROOM_STEM,
	IRON_BARS,
	CHAIN,
	GLASS_PANE,
	MELON,
	VINE,
	GLOW_LICHEN,
	BRICK_STAIRS,
	STONE_BRICK_STAIRS,
	MUD_BRICK_STAIRS,
	MYCELIUM,
	LILY_PAD,
	NETHER_BRICKS,
	CRACKED_NETHER_BRICKS,
	CHISELED_NETHER_BRICKS,
	NETHER_BRICK_FENCE,
	NETHER_BRICK_STAIRS,
	SCULK,
	SCULK_VEIN,
	SCULK_CATALYST,
	SCULK_SHRIEKER,
	ENCHANTING_TABLE,
	END_PORTAL_FRAME,
	END_STONE,
	END_STONE_BRICKS,
	DRAGON_EGG,
	SANDSTONE_STAIRS,
	ENDER_CHEST,
	EMERALD_BLOCK,
	OAK_STAIRS,
	SPRUCE_STAIRS,
	BIRCH_STAIRS,
	JUNGLE_STAIRS,
	ACACIA_STAIRS,
	DARK_OAK_STAIRS,
	MANGROVE_STAIRS,
	CRIMSON_STAIRS,
	WARPED_STAIRS,
	COMMAND_BLOCK,
	BEACON,
	COBBLESTONE_WALL,
	MOSSY_COBBLESTONE_WALL,
	BRICK_WALL,
	PRISMARINE_WALL,
	RED_SANDSTONE_WALL,
	MOSSY_STONE_BRICK_WALL,
	GRANITE_WALL,
	STONE_BRICK_WALL,
	MUD_BRICK_WALL,
	NETHER_BRICK_WALL,
	ANDESITE_WALL,
	RED_NETHER_BRICK_WALL,
	SANDSTONE_WALL,
	END_STONE_BRICK_WALL,
	DIORITE_WALL,
	BLACKSTONE_WALL,
	POLISHED_BLACKSTONE_WALL,
	POLISHED_BLACKSTONE_BRICK_WALL,
	COBBLED_DEEPSLATE_WALL,
	POLISHED_DEEPSLATE_WALL,
	DEEPSLATE_BRICK_WALL,
	DEEPSLATE_TILE_WALL,
	ANVIL,
	CHIPPED_ANVIL,
	DAMAGED_ANVIL,
	CHISELED_QUARTZ_BLOCK,
	QUARTZ_BLOCK,
	QUARTZ_BRICKS,
	QUARTZ_PILLAR,
	QUARTZ_STAIRS,
	WHITE_TERRACOTTA,
	ORANGE_TERRACOTTA,
	MAGENTA_TERRACOTTA,
	LIGHT_BLUE_TERRACOTTA,
	YELLOW_TERRACOTTA,
	LIME_TERRACOTTA,
	PINK_TERRACOTTA,
	GRAY_TERRACOTTA,
	LIGHT_GRAY_TERRACOTTA,
	CYAN_TERRACOTTA,
	PURPLE_TERRACOTTA,
	BLUE_TERRACOTTA,
	BROWN_TERRACOTTA,
	GREEN_TERRACOTTA,
	RED_TERRACOTTA,
	BLACK_TERRACOTTA,
	BARRIER,
	LIGHT,
	HAY_BLOCK,
	WHITE_CARPET,
	ORANGE_CARPET,
	MAGENTA_CARPET,
	LIGHT_BLUE_CARPET,
	YELLOW_CARPET,
	LIME_CARPET,
	PINK_CARPET,
	GRAY_CARPET,
	LIGHT_GRAY_CARPET,
	CYAN_CARPET,
	PURPLE_CARPET,
	BLUE_CARPET,
	BROWN_CARPET,
	GREEN_CARPET,
	RED_CARPET,
	BLACK_CARPET,
	TERRACOTTA,
	PACKED_ICE,
	DIRT_PATH,
	SUNFLOWER,
	LILAC,
	ROSE_BUSH,
	PEONY,
	TALL_GRASS,
	LARGE_FERN,
	WHITE_STAINED_GLASS,
	ORANGE_STAINED_GLASS,
	MAGENTA_STAINED_GLASS,
	LIGHT_BLUE_STAINED_GLASS,
	YELLOW_STAINED_GLASS,
	LIME_STAINED_GLASS,
	PINK_STAINED_GLASS,
	GRAY_STAINED_GLASS,
	LIGHT_GRAY_STAINED_GLASS,
	CYAN_STAINED_GLASS,
	PURPLE_STAINED_GLASS,
	BLUE_STAINED_GLASS,
	BROWN_STAINED_GLASS,
	GREEN_STAINED_GLASS,
	RED_STAINED_GLASS,
	BLACK_STAINED_GLASS,
	WHITE_STAINED_GLASS_PANE,
	ORANGE_STAINED_GLASS_PANE,
	MAGENTA_STAINED_GLASS_PANE,
	LIGHT_BLUE_STAINED_GLASS_PANE,
	YELLOW_STAINED_GLASS_PANE,
	LIME_STAINED_GLASS_PANE,
	PINK_STAINED_GLASS_PANE,
	GRAY_STAINED_GLASS_PANE,
	LIGHT_GRAY_STAINED_GLASS_PANE,
	CYAN_STAINED_GLASS_PANE,
	PURPLE_STAINED_GLASS_PANE,
	BLUE_STAINED_GLASS_PANE,
	BROWN_STAINED_GLASS_PANE,
	GREEN_STAINED_GLASS_PANE,
	RED_STAINED_GLASS_PANE,
	BLACK_STAINED_GLASS_PANE,
	PRISMARINE,
	PRISMARINE_BRICKS,
	DARK_PRISMARINE,
	PRISMARINE_STAIRS,
	PRISMARINE_BRICK_STAIRS,
	DARK_PRISMARINE_STAIRS,
	SEA_LANTERN,
	RED_SANDSTONE,
	CHISELED_RED_SANDSTONE,
	CUT_RED_SANDSTONE,
	RED_SANDSTONE_STAIRS,
	REPEATING_COMMAND_BLOCK,
	CHAIN_COMMAND_BLOCK,
	MAGMA_BLOCK,
	NETHER_WART_BLOCK,
	WARPED_WART_BLOCK,
	RED_NETHER_BRICKS,
	BONE_BLOCK,
	STRUCTURE_VOID,
	SHULKER_BOX,
	WHITE_SHULKER_BOX,
	ORANGE_SHULKER_BOX,
	MAGENTA_SHULKER_BOX,
	LIGHT_BLUE_SHULKER_BOX,
	YELLOW_SHULKER_BOX,
	LIME_SHULKER_BOX,
	PINK_SHULKER_BOX,
	GRAY_SHULKER_BOX,
	LIGHT_GRAY_SHULKER_BOX,
	CYAN_SHULKER_BOX,
	PURPLE_SHULKER_BOX,
	BLUE_SHULKER_BOX,
	BROWN_SHULKER_BOX,
	GREEN_SHULKER_BOX,
	RED_SHULKER_BOX,
	BLACK_SHULKER_BOX,
	WHITE_GLAZED_TERRACOTTA,
	ORANGE_GLAZED_TERRACOTTA,
	MAGENTA_GLAZED_TERRACOTTA,
	LIGHT_BLUE_GLAZED_TERRACOTTA,
	YELLOW_GLAZED_TERRACOTTA,
	LIME_GLAZED_TERRACOTTA,
	PINK_GLAZED_TERRACOTTA,
	GRAY_GLAZED_TERRACOTTA,
	LIGHT_GRAY_GLAZED_TERRACOTTA,
	CYAN_GLAZED_TERRACOTTA,
	PURPLE_GLAZED_TERRACOTTA,
	BLUE_GLAZED_TERRACOTTA,
	BROWN_GLAZED_TERRACOTTA,
	GREEN_GLAZED_TERRACOTTA,
	RED_GLAZED_TERRACOTTA,
	BLACK_GLAZED_TERRACOTTA,
	WHITE_CONCRETE,
	ORANGE_CONCRETE,
	MAGENTA_CONCRETE,
	LIGHT_BLUE_CONCRETE,
	YELLOW_CONCRETE,
	LIME_CONCRETE,
	PINK_CONCRETE,
	GRAY_CONCRETE,
	LIGHT_GRAY_CONCRETE,
	CYAN_CONCRETE,
	PURPLE_CONCRETE,
	BLUE_CONCRETE,
	BROWN_CONCRETE,
	GREEN_CONCRETE,
	RED_CONCRETE,
	BLACK_CONCRETE,
	WHITE_CONCRETE_POWDER,
	ORANGE_CONCRETE_POWDER,
	MAGENTA_CONCRETE_POWDER,
	LIGHT_BLUE_CONCRETE_POWDER,
	YELLOW_CONCRETE_POWDER,
	LIME_CONCRETE_POWDER,
	PINK_CONCRETE_POWDER,
	GRAY_CONCRETE_POWDER,
	LIGHT_GRAY_CONCRETE_POWDER,
	CYAN_CONCRETE_POWDER,
	PURPLE_CONCRETE_POWDER,
	BLUE_CONCRETE_POWDER,
	BROWN_CONCRETE_POWDER,
	GREEN_CONCRETE_POWDER,
	RED_CONCRETE_POWDER,
	BLACK_CONCRETE_POWDER,
	TURTLE_EGG,
	DEAD_TUBE_CORAL_BLOCK,
	DEAD_BRAIN_CORAL_BLOCK,
	DEAD_BUBBLE_CORAL_BLOCK,
	DEAD_FIRE_CORAL_BLOCK,
	DEAD_HORN_CORAL_BLOCK,
	TUBE_CORAL_BLOCK,
	BRAIN_CORAL_BLOCK,
	BUBBLE_CORAL_BLOCK,
	FIRE_CORAL_BLOCK,
	HORN_CORAL_BLOCK,
	TUBE_CORAL,
	BRAIN_CORAL,
	BUBBLE_CORAL,
	FIRE_CORAL,
	HORN_CORAL,
	DEAD_BRAIN_CORAL,
	DEAD_BUBBLE_CORAL,
	DEAD_FIRE_CORAL,
	DEAD_HORN_CORAL,
	DEAD_TUBE_CORAL,
	TUBE_CORAL_FAN,
	BRAIN_CORAL_FAN,
	BUBBLE_CORAL_FAN,
	FIRE_CORAL_FAN,
	HORN_CORAL_FAN,
	DEAD_TUBE_CORAL_FAN,
	DEAD_BRAIN_CORAL_FAN,
	DEAD_BUBBLE_CORAL_FAN,
	DEAD_FIRE_CORAL_FAN,
	DEAD_HORN_CORAL_FAN,
	BLUE_ICE,
	CONDUIT,
	POLISHED_GRANITE_STAIRS,
	SMOOTH_RED_SANDSTONE_STAIRS,
	MOSSY_STONE_BRICK_STAIRS,
	POLISHED_DIORITE_STAIRS,
	MOSSY_COBBLESTONE_STAIRS,
	END_STONE_BRICK_STAIRS,
	STONE_STAIRS,
	SMOOTH_SANDSTONE_STAIRS,
	SMOOTH_QUARTZ_STAIRS,
	GRANITE_STAIRS,
	ANDESITE_STAIRS,
	RED_NETHER_BRICK_STAIRS,
	POLISHED_ANDESITE_STAIRS,
	DIORITE_STAIRS,
	COBBLED_DEEPSLATE_STAIRS,
	POLISHED_DEEPSLATE_STAIRS,
	DEEPSLATE_BRICK_STAIRS,
	DEEPSLATE_TILE_STAIRS,
	POLISHED_GRANITE_SLAB,
	SMOOTH_RED_SANDSTONE_SLAB,
	MOSSY_STONE_BRICK_SLAB,
	POLISHED_DIORITE_SLAB,
	MOSSY_COBBLESTONE_SLAB,
	END_STONE_BRICK_SLAB,
	SMOOTH_SANDSTONE_SLAB,
	SMOOTH_QUARTZ_SLAB,
	GRANITE_SLAB,
	ANDESITE_SLAB,
	RED_NETHER_BRICK_SLAB,
	POLISHED_ANDESITE_SLAB,
	DIORITE_SLAB,
	COBBLED_DEEPSLATE_SLAB,
	POLISHED_DEEPSLATE_SLAB,
	DEEPSLATE_BRICK_SLAB,
	DEEPSLATE_TILE_SLAB,
	SCAFFOLDING,
	REDSTONE,
	REDSTONE_TORCH,
	REDSTONE_BLOCK,
	REPEATER,
	COMPARATOR,
	PISTON,
	STICKY_PISTON,
	SLIME_BLOCK,
	HONEY_BLOCK,
	OBSERVER,
	HOPPER,
	DISPENSER,
	DROPPER,
	LECTERN,
	TARGET,
	LEVER,
	LIGHTNING_ROD,
	DAYLIGHT_DETECTOR,
	SCULK_SENSOR,
	TRIPWIRE_HOOK,
	TRAPPED_CHEST,
	TNT,
	REDSTONE_LAMP,
	NOTE_BLOCK,
	STONE_BUTTON,
	POLISHED_BLACKSTONE_BUTTON,
	OAK_BUTTON,
	SPRUCE_BUTTON,
	BIRCH_BUTTON,
	JUNGLE_BUTTON,
	ACACIA_BUTTON,
	DARK_OAK_BUTTON,
	MANGROVE_BUTTON,
	CRIMSON_BUTTON,
	WARPED_BUTTON,
	STONE_PRESSURE_PLATE,
	POLISHED_BLACKSTONE_PRESSURE_PLATE,
	LIGHT_WEIGHTED_PRESSURE_PLATE,
	HEAVY_WEIGHTED_PRESSURE_PLATE,
	OAK_PRESSURE_PLATE,
	SPRUCE_PRESSURE_PLATE,
	BIRCH_PRESSURE_PLATE,
	JUNGLE_PRESSURE_PLATE,
	ACACIA_PRESSURE_PLATE,
	DARK_OAK_PRESSURE_PLATE,
	MANGROVE_PRESSURE_PLATE,
	CRIMSON_PRESSURE_PLATE,
	WARPED_PRESSURE_PLATE,
	IRON_DOOR,
	OAK_DOOR,
	SPRUCE_DOOR,
	BIRCH_DOOR,
	JUNGLE_DOOR,
	ACACIA_DOOR,
	DARK_OAK_DOOR,
	MANGROVE_DOOR,
	CRIMSON_DOOR,
	WARPED_DOOR,
	IRON_TRAPDOOR,
	OAK_TRAPDOOR,
	SPRUCE_TRAPDOOR,
	BIRCH_TRAPDOOR,
	JUNGLE_TRAPDOOR,
	ACACIA_TRAPDOOR,
	DARK_OAK_TRAPDOOR,
	MANGROVE_TRAPDOOR,
	CRIMSON_TRAPDOOR,
	WARPED_TRAPDOOR,
	OAK_FENCE_GATE,
	SPRUCE_FENCE_GATE,
	BIRCH_FENCE_GATE,
	JUNGLE_FENCE_GATE,
	ACACIA_FENCE_GATE,
	DARK_OAK_FENCE_GATE,
	MANGROVE_FENCE_GATE,
	CRIMSON_FENCE_GATE,
	WARPED_FENCE_GATE,
	POWERED_RAIL,
	DETECTOR_RAIL,
	RAIL,
	ACTIVATOR_RAIL,
	SADDLE,
	MINECART,
	CHEST_MINECART,
	FURNACE_MINECART,
	TNT_MINECART,
	HOPPER_MINECART,
	CARROT_ON_A_STICK,
	WARPED_FUNGUS_ON_A_STICK,
	ELYTRA,
	OAK_BOAT,
	OAK_CHEST_BOAT,
	SPRUCE_BOAT,
	SPRUCE_CHEST_BOAT,
	BIRCH_BOAT,
	BIRCH_CHEST_BOAT,
	JUNGLE_BOAT,
	JUNGLE_CHEST_BOAT,
	ACACIA_BOAT,
	ACACIA_CHEST_BOAT,
	DARK_OAK_BOAT,
	DARK_OAK_CHEST_BOAT,
	MANGROVE_BOAT,
	MANGROVE_CHEST_BOAT,
	STRUCTURE_BLOCK,
	JIGSAW,
	TURTLE_HELMET,
	SCUTE,
	FLINT_AND_STEEL,
	APPLE,
	BOW,
	ARROW,
	COAL,
	CHARCOAL,
	DIAMOND,
	EMERALD,
	LAPIS_LAZULI,
	QUARTZ,
	AMETHYST_SHARD,
	RAW_IRON,
	IRON_INGOT,
	RAW_COPPER,
	COPPER_INGOT,
	RAW_GOLD,
	GOLD_INGOT,
	NETHERITE_INGOT,
	NETHERITE_SCRAP,
	WOODEN_SWORD,
	WOODEN_SHOVEL,
	WOODEN_PICKAXE,
	WOODEN_AXE,
	WOODEN_HOE,
	STONE_SWORD,
	STONE_SHOVEL,
	STONE_PICKAXE,
	STONE_AXE,
	STONE_HOE,
	GOLDEN_SWORD,
	GOLDEN_SHOVEL,
	GOLDEN_PICKAXE,
	GOLDEN_AXE,
	GOLDEN_HOE,
	IRON_SWORD,
	IRON_SHOVEL,
	IRON_PICKAXE,
	IRON_AXE,
	IRON_HOE,
	DIAMOND_SWORD,
	DIAMOND_SHOVEL,
	DIAMOND_PICKAXE,
	DIAMOND_AXE,
	DIAMOND_HOE,
	NETHERITE_SWORD,
	NETHERITE_SHOVEL,
	NETHERITE_PICKAXE,
	NETHERITE_AXE,
	NETHERITE_HOE,
	STICK,
	BOWL,
	MUSHROOM_STEW,
	STRING,
	FEATHER,
	GUNPOWDER,
	WHEAT_SEEDS,
	WHEAT,
	BREAD,
	LEATHER_HELMET,
	LEATHER_CHESTPLATE,
	LEATHER_LEGGINGS,
	LEATHER_BOOTS,
	CHAINMAIL_HELMET,
	CHAINMAIL_CHESTPLATE,
	CHAINMAIL_LEGGINGS,
	CHAINMAIL_BOOTS,
	IRON_HELMET,
	IRON_CHESTPLATE,
	IRON_LEGGINGS,
	IRON_BOOTS,
	DIAMOND_HELMET,
	DIAMOND_CHESTPLATE,
	DIAMOND_LEGGINGS,
	DIAMOND_BOOTS,
	GOLDEN_HELMET,
	GOLDEN_CHESTPLATE,
	GOLDEN_LEGGINGS,
	GOLDEN_BOOTS,
	NETHERITE_HELMET,
	NETHERITE_CHESTPLATE,
	NETHERITE_LEGGINGS,
	NETHERITE_BOOTS,
	FLINT,
	PORKCHOP,
	COOKED_PORKCHOP,
	PAINTING,
	GOLDEN_APPLE,
	ENCHANTED_GOLDEN_APPLE,
	OAK_SIGN,
	SPRUCE_SIGN,
	BIRCH_SIGN,
	JUNGLE_SIGN,
	ACACIA_SIGN,
	DARK_OAK_SIGN,
	MANGROVE_SIGN,
	CRIMSON_SIGN,
	WARPED_SIGN,
	BUCKET,
	WATER_BUCKET,
	LAVA_BUCKET,
	POWDER_SNOW_BUCKET,
	SNOWBALL,
	LEATHER,
	MILK_BUCKET,
	PUFFERFISH_BUCKET,
	SALMON_BUCKET,
	COD_BUCKET,
	TROPICAL_FISH_BUCKET,
	AXOLOTL_BUCKET,
	TADPOLE_BUCKET,
	BRICK,
	CLAY_BALL,
	DRIED_KELP_BLOCK,
	PAPER,
	BOOK,
	SLIME_BALL,
	EGG,
	COMPASS,
	RECOVERY_COMPASS,
	BUNDLE,
	FISHING_ROD,
	CLOCK,
	SPYGLASS,
	GLOWSTONE_DUST,
	COD,
	SALMON,
	TROPICAL_FISH,
	PUFFERFISH,
	COOKED_COD,
	COOKED_SALMON,
	INK_SAC,
	GLOW_INK_SAC,
	COCOA_BEANS,
	WHITE_DYE,
	ORANGE_DYE,
	MAGENTA_DYE,
	LIGHT_BLUE_DYE,
	YELLOW_DYE,
	LIME_DYE,
	PINK_DYE,
	GRAY_DYE,
	LIGHT_GRAY_DYE,
	CYAN_DYE,
	PURPLE_DYE,
	BLUE_DYE,
	BROWN_DYE,
	GREEN_DYE,
	RED_DYE,
	BLACK_DYE,
	BONE_MEAL,
	BONE,
	SUGAR,
	CAKE,
	WHITE_BED,
	ORANGE_BED,
	MAGENTA_BED,
	LIGHT_BLUE_BED,
	YELLOW_BED,
	LIME_BED,
	PINK_BED,
	GRAY_BED,
	LIGHT_GRAY_BED,
	CYAN_BED,
	PURPLE_BED,
	BLUE_BED,
	BROWN_BED,
	GREEN_BED,
	RED_BED,
	BLACK_BED,
	COOKIE,
	FILLED_MAP,
	SHEARS,
	MELON_SLICE,
	DRIED_KELP,
	PUMPKIN_SEEDS,
	MELON_SEEDS,
	BEEF,
	COOKED_BEEF,
	CHICKEN,
	COOKED_CHICKEN,
	ROTTEN_FLESH,
	ENDER_PEARL,
	BLAZE_ROD,
	GHAST_TEAR,
	GOLD_NUGGET,
	NETHER_WART,
	POTION,
	GLASS_BOTTLE,
	SPIDER_EYE,
	FERMENTED_SPIDER_EYE,
	BLAZE_POWDER,
	MAGMA_CREAM,
	BREWING_STAND,
	CAULDRON,
	ENDER_EYE,
	GLISTERING_MELON_SLICE,
	ALLAY_SPAWN_EGG,
	AXOLOTL_SPAWN_EGG,
	BAT_SPAWN_EGG,
	BEE_SPAWN_EGG,
	BLAZE_SPAWN_EGG,
	CAT_SPAWN_EGG,
	CAVE_SPIDER_SPAWN_EGG,
	CHICKEN_SPAWN_EGG,
	COD_SPAWN_EGG,
	COW_SPAWN_EGG,
	CREEPER_SPAWN_EGG,
	DOLPHIN_SPAWN_EGG,
	DONKEY_SPAWN_EGG,
	DROWNED_SPAWN_EGG,
	ELDER_GUARDIAN_SPAWN_EGG,
	ENDERMAN_SPAWN_EGG,
	ENDERMITE_SPAWN_EGG,
	EVOKER_SPAWN_EGG,
	FOX_SPAWN_EGG,
	FROG_SPAWN_EGG,
	GHAST_SPAWN_EGG,
	GLOW_SQUID_SPAWN_EGG,
	GOAT_SPAWN_EGG,
	GUARDIAN_SPAWN_EGG,
	HOGLIN_SPAWN_EGG,
	HORSE_SPAWN_EGG,
	HUSK_SPAWN_EGG,
	LLAMA_SPAWN_EGG,
	MAGMA_CUBE_SPAWN_EGG,
	MOOSHROOM_SPAWN_EGG,
	MULE_SPAWN_EGG,
	OCELOT_SPAWN_EGG,
	PANDA_SPAWN_EGG,
	PARROT_SPAWN_EGG,
	PHANTOM_SPAWN_EGG,
	PIG_SPAWN_EGG,
	PIGLIN_SPAWN_EGG,
	PIGLIN_BRUTE_SPAWN_EGG,
	PILLAGER_SPAWN_EGG,
	POLAR_BEAR_SPAWN_EGG,
	PUFFERFISH_SPAWN_EGG,
	RABBIT_SPAWN_EGG,
	RAVAGER_SPAWN_EGG,
	SALMON_SPAWN_EGG,
	SHEEP_SPAWN_EGG,
	SHULKER_SPAWN_EGG,
	SILVERFISH_SPAWN_EGG,
	SKELETON_SPAWN_EGG,
	SKELETON_HORSE_SPAWN_EGG,
	SLIME_SPAWN_EGG,
	SPIDER_SPAWN_EGG,
	SQUID_SPAWN_EGG,
	STRAY_SPAWN_EGG,
	STRIDER_SPAWN_EGG,
	TADPOLE_SPAWN_EGG,
	TRADER_LLAMA_SPAWN_EGG,
	TROPICAL_FISH_SPAWN_EGG,
	TURTLE_SPAWN_EGG,
	VEX_SPAWN_EGG,
	VILLAGER_SPAWN_EGG,
	VINDICATOR_SPAWN_EGG,
	WANDERING_TRADER_SPAWN_EGG,
	WARDEN_SPAWN_EGG,
	WITCH_SPAWN_EGG,
	WITHER_SKELETON_SPAWN_EGG,
	WOLF_SPAWN_EGG,
	ZOGLIN_SPAWN_EGG,
	ZOMBIE_SPAWN_EGG,
	ZOMBIE_HORSE_SPAWN_EGG,
	ZOMBIE_VILLAGER_SPAWN_EGG,
	ZOMBIFIED_PIGLIN_SPAWN_EGG,
	EXPERIENCE_BOTTLE,
	FIRE_CHARGE,
	WRITABLE_BOOK,
	WRITTEN_BOOK,
	ITEM_FRAME,
	GLOW_ITEM_FRAME,
	FLOWER_POT,
	CARROT,
	POTATO,
	BAKED_POTATO,
	POISONOUS_POTATO,
	MAP,
	GOLDEN_CARROT,
	SKELETON_SKULL,
	WITHER_SKELETON_SKULL,
	PLAYER_HEAD,
	ZOMBIE_HEAD,
	CREEPER_HEAD,
	DRAGON_HEAD,
	NETHER_STAR,
	PUMPKIN_PIE,
	FIREWORK_ROCKET,
	FIREWORK_STAR,
	ENCHANTED_BOOK,
	NETHER_BRICK,
	PRISMARINE_SHARD,
	PRISMARINE_CRYSTALS,
	RABBIT,
	COOKED_RABBIT,
	RABBIT_STEW,
	RABBIT_FOOT,
	RABBIT_HIDE,
	ARMOR_STAND,
	IRON_HORSE_ARMOR,
	GOLDEN_HORSE_ARMOR,
	DIAMOND_HORSE_ARMOR,
	LEATHER_HORSE_ARMOR,
	LEAD,
	NAME_TAG,
	COMMAND_BLOCK_MINECART,
	MUTTON,
	COOKED_MUTTON,
	WHITE_BANNER,
	ORANGE_BANNER,
	MAGENTA_BANNER,
	LIGHT_BLUE_BANNER,
	YELLOW_BANNER,
	LIME_BANNER,
	PINK_BANNER,
	GRAY_BANNER,
	LIGHT_GRAY_BANNER,
	CYAN_BANNER,
	PURPLE_BANNER,
	BLUE_BANNER,
	BROWN_BANNER,
	GREEN_BANNER,
	RED_BANNER,
	BLACK_BANNER,
	END_CRYSTAL,
	CHORUS_FRUIT,
	POPPED_CHORUS_FRUIT,
	BEETROOT,
	BEETROOT_SEEDS,
	BEETROOT_SOUP,
	DRAGON_BREATH,
	SPLASH_POTION,
	SPECTRAL_ARROW,
	TIPPED_ARROW,
	LINGERING_POTION,
	SHIELD,
	TOTEM_OF_UNDYING,
	SHULKER_SHELL,
	IRON_NUGGET,
	KNOWLEDGE_BOOK,
	DEBUG_STICK,
	MUSIC_DISC_13,
	MUSIC_DISC_CAT,
	MUSIC_DISC_BLOCKS,
	MUSIC_DISC_CHIRP,
	MUSIC_DISC_FAR,
	MUSIC_DISC_MALL,
	MUSIC_DISC_MELLOHI,
	MUSIC_DISC_STAL,
	MUSIC_DISC_STRAD,
	MUSIC_DISC_WARD,
	MUSIC_DISC_11,
	MUSIC_DISC_WAIT,
	MUSIC_DISC_OTHERSIDE,
	MUSIC_DISC_5,
	MUSIC_DISC_PIGSTEP,
	DISC_FRAGMENT_5,
	TRIDENT,
	PHANTOM_MEMBRANE,
	NAUTILUS_SHELL,
	HEART_OF_THE_SEA,
	CROSSBOW,
	SUSPICIOUS_STEW,
	LOOM,
	FLOWER_BANNER_PATTERN,
	CREEPER_BANNER_PATTERN,
	SKULL_BANNER_PATTERN,
	MOJANG_BANNER_PATTERN,
	GLOBE_BANNER_PATTERN,
	PIGLIN_BANNER_PATTERN,
	GOAT_HORN,
	COMPOSTER,
	BARREL,
	SMOKER,
	BLAST_FURNACE,
	CARTOGRAPHY_TABLE,
	FLETCHING_TABLE,
	GRINDSTONE,
	SMITHING_TABLE,
	STONECUTTER,
	BELL,
	LANTERN,
	SOUL_LANTERN,
	SWEET_BERRIES,
	GLOW_BERRIES,
	CAMPFIRE,
	SOUL_CAMPFIRE,
	SHROOMLIGHT,
	HONEYCOMB,
	BEE_NEST,
	BEEHIVE,
	HONEY_BOTTLE,
	HONEYCOMB_BLOCK,
	LODESTONE,
	CRYING_OBSIDIAN,
	BLACKSTONE,
	BLACKSTONE_SLAB,
	BLACKSTONE_STAIRS,
	GILDED_BLACKSTONE,
	POLISHED_BLACKSTONE,
	POLISHED_BLACKSTONE_SLAB,
	POLISHED_BLACKSTONE_STAIRS,
	CHISELED_POLISHED_BLACKSTONE,
	POLISHED_BLACKSTONE_BRICKS,
	POLISHED_BLACKSTONE_BRICK_SLAB,
	POLISHED_BLACKSTONE_BRICK_STAIRS,
	CRACKED_POLISHED_BLACKSTONE_BRICKS,
	RESPAWN_ANCHOR,
	CANDLE,
	WHITE_CANDLE,
	ORANGE_CANDLE,
	MAGENTA_CANDLE,
	LIGHT_BLUE_CANDLE,
	YELLOW_CANDLE,
	LIME_CANDLE,
	PINK_CANDLE,
	GRAY_CANDLE,
	LIGHT_GRAY_CANDLE,
	CYAN_CANDLE,
	PURPLE_CANDLE,
	BLUE_CANDLE,
	BROWN_CANDLE,
	GREEN_CANDLE,
	RED_CANDLE,
	BLACK_CANDLE,
	SMALL_AMETHYST_BUD,
	MEDIUM_AMETHYST_BUD,
	LARGE_AMETHYST_BUD,
	AMETHYST_CLUSTER,
	POINTED_DRIPSTONE,
	OCHRE_FROGLIGHT,
	VERDANT_FROGLIGHT,
	PEARLESCENT_FROGLIGHT,
	FROGSPAWN,
	ECHO_SHARD,
	WATER,
	LAVA,
	TALL_SEAGRASS,
	PISTON_HEAD,
	MOVING_PISTON,
	WALL_TORCH,
	FIRE,
	SOUL_FIRE,
	REDSTONE_WIRE,
	OAK_WALL_SIGN,
	SPRUCE_WALL_SIGN,
	BIRCH_WALL_SIGN,
	ACACIA_WALL_SIGN,
	JUNGLE_WALL_SIGN,
	DARK_OAK_WALL_SIGN,
	MANGROVE_WALL_SIGN,
	REDSTONE_WALL_TORCH,
	SOUL_WALL_TORCH,
	NETHER_PORTAL,
	ATTACHED_PUMPKIN_STEM,
	ATTACHED_MELON_STEM,
	PUMPKIN_STEM,
	MELON_STEM,
	WATER_CAULDRON,
	LAVA_CAULDRON,
	POWDER_SNOW_CAULDRON,
	END_PORTAL,
	COCOA,
	TRIPWIRE,
	POTTED_OAK_SAPLING,
	POTTED_SPRUCE_SAPLING,
	POTTED_BIRCH_SAPLING,
	POTTED_JUNGLE_SAPLING,
	POTTED_ACACIA_SAPLING,
	POTTED_DARK_OAK_SAPLING,
	POTTED_MANGROVE_PROPAGULE,
	POTTED_FERN,
	POTTED_DANDELION,
	POTTED_POPPY,
	POTTED_BLUE_ORCHID,
	POTTED_ALLIUM,
	POTTED_AZURE_BLUET,
	POTTED_RED_TULIP,
	POTTED_ORANGE_TULIP,
	POTTED_WHITE_TULIP,
	POTTED_PINK_TULIP,
	POTTED_OXEYE_DAISY,
	POTTED_CORNFLOWER,
	POTTED_LILY_OF_THE_VALLEY,
	POTTED_WITHER_ROSE,
	POTTED_RED_MUSHROOM,
	POTTED_BROWN_MUSHROOM,
	POTTED_DEAD_BUSH,
	POTTED_CACTUS,
	CARROTS,
	POTATOES,
	SKELETON_WALL_SKULL,
	WITHER_SKELETON_WALL_SKULL,
	ZOMBIE_WALL_HEAD,
	PLAYER_WALL_HEAD,
	CREEPER_WALL_HEAD,
	DRAGON_WALL_HEAD,
	WHITE_WALL_BANNER,
	ORANGE_WALL_BANNER,
	MAGENTA_WALL_BANNER,
	LIGHT_BLUE_WALL_BANNER,
	YELLOW_WALL_BANNER,
	LIME_WALL_BANNER,
	PINK_WALL_BANNER,
	GRAY_WALL_BANNER,
	LIGHT_GRAY_WALL_BANNER,
	CYAN_WALL_BANNER,
	PURPLE_WALL_BANNER,
	BLUE_WALL_BANNER,
	BROWN_WALL_BANNER,
	GREEN_WALL_BANNER,
	RED_WALL_BANNER,
	BLACK_WALL_BANNER,
	BEETROOTS,
	END_GATEWAY,
	FROSTED_ICE,
	KELP_PLANT,
	DEAD_TUBE_CORAL_WALL_FAN,
	DEAD_BRAIN_CORAL_WALL_FAN,
	DEAD_BUBBLE_CORAL_WALL_FAN,
	DEAD_FIRE_CORAL_WALL_FAN,
	DEAD_HORN_CORAL_WALL_FAN,
	TUBE_CORAL_WALL_FAN,
	BRAIN_CORAL_WALL_FAN,
	BUBBLE_CORAL_WALL_FAN,
	FIRE_CORAL_WALL_FAN,
	HORN_CORAL_WALL_FAN,
	BAMBOO_SAPLING,
	POTTED_BAMBOO,
	VOID_AIR,
	CAVE_AIR,
	BUBBLE_COLUMN,
	SWEET_BERRY_BUSH,
	WEEPING_VINES_PLANT,
	TWISTING_VINES_PLANT,
	CRIMSON_WALL_SIGN,
	WARPED_WALL_SIGN,
	POTTED_CRIMSON_FUNGUS,
	POTTED_WARPED_FUNGUS,
	POTTED_CRIMSON_ROOTS,
	POTTED_WARPED_ROOTS,
	CANDLE_CAKE,
	WHITE_CANDLE_CAKE,
	ORANGE_CANDLE_CAKE,
	MAGENTA_CANDLE_CAKE,
	LIGHT_BLUE_CANDLE_CAKE,
	YELLOW_CANDLE_CAKE,
	LIME_CANDLE_CAKE,
	PINK_CANDLE_CAKE,
	GRAY_CANDLE_CAKE,
	LIGHT_GRAY_CANDLE_CAKE,
	CYAN_CANDLE_CAKE,
	PURPLE_CANDLE_CAKE,
	BLUE_CANDLE_CAKE,
	BROWN_CANDLE_CAKE,
	GREEN_CANDLE_CAKE,
	RED_CANDLE_CAKE,
	BLACK_CANDLE_CAKE,
	POWDER_SNOW,
	CAVE_VINES,
	CAVE_VINES_PLANT,
	BIG_DRIPLEAF_STEM,
	POTTED_AZALEA_BUSH,
	POTTED_FLOWERING_AZALEA_BUSH,
	LEGACY_AIR,
	LEGACY_STONE,
	LEGACY_GRASS,
	LEGACY_DIRT,
	LEGACY_COBBLESTONE,
	LEGACY_WOOD,
	LEGACY_SAPLING,
	LEGACY_BEDROCK,
	LEGACY_WATER,
	LEGACY_STATIONARY_WATER,
	LEGACY_LAVA,
	LEGACY_STATIONARY_LAVA,
	LEGACY_SAND,
	LEGACY_GRAVEL,
	LEGACY_GOLD_ORE,
	LEGACY_IRON_ORE,
	LEGACY_COAL_ORE,
	LEGACY_LOG,
	LEGACY_LEAVES,
	LEGACY_SPONGE,
	LEGACY_GLASS,
	LEGACY_LAPIS_ORE,
	LEGACY_LAPIS_BLOCK,
	LEGACY_DISPENSER,
	LEGACY_SANDSTONE,
	LEGACY_NOTE_BLOCK,
	LEGACY_BED_BLOCK,
	LEGACY_POWERED_RAIL,
	LEGACY_DETECTOR_RAIL,
	LEGACY_PISTON_STICKY_BASE,
	LEGACY_WEB,
	LEGACY_LONG_GRASS,
	LEGACY_DEAD_BUSH,
	LEGACY_PISTON_BASE,
	LEGACY_PISTON_EXTENSION,
	LEGACY_WOOL,
	LEGACY_PISTON_MOVING_PIECE,
	LEGACY_YELLOW_FLOWER,
	LEGACY_RED_ROSE,
	LEGACY_BROWN_MUSHROOM,
	LEGACY_RED_MUSHROOM,
	LEGACY_GOLD_BLOCK,
	LEGACY_IRON_BLOCK,
	LEGACY_DOUBLE_STEP,
	LEGACY_STEP,
	LEGACY_BRICK,
	LEGACY_TNT,
	LEGACY_BOOKSHELF,
	LEGACY_MOSSY_COBBLESTONE,
	LEGACY_OBSIDIAN,
	LEGACY_TORCH,
	LEGACY_FIRE,
	LEGACY_MOB_SPAWNER,
	LEGACY_WOOD_STAIRS,
	LEGACY_CHEST,
	LEGACY_REDSTONE_WIRE,
	LEGACY_DIAMOND_ORE,
	LEGACY_DIAMOND_BLOCK,
	LEGACY_WORKBENCH,
	LEGACY_CROPS,
	LEGACY_SOIL,
	LEGACY_FURNACE,
	LEGACY_BURNING_FURNACE,
	LEGACY_SIGN_POST,
	LEGACY_WOODEN_DOOR,
	LEGACY_LADDER,
	LEGACY_RAILS,
	LEGACY_COBBLESTONE_STAIRS,
	LEGACY_WALL_SIGN,
	LEGACY_LEVER,
	LEGACY_STONE_PLATE,
	LEGACY_IRON_DOOR_BLOCK,
	LEGACY_WOOD_PLATE,
	LEGACY_REDSTONE_ORE,
	LEGACY_GLOWING_REDSTONE_ORE,
	LEGACY_REDSTONE_TORCH_OFF,
	LEGACY_REDSTONE_TORCH_ON,
	LEGACY_STONE_BUTTON,
	LEGACY_SNOW,
	LEGACY_ICE,
	LEGACY_SNOW_BLOCK,
	LEGACY_CACTUS,
	LEGACY_CLAY,
	LEGACY_SUGAR_CANE_BLOCK,
	LEGACY_JUKEBOX,
	LEGACY_FENCE,
	LEGACY_PUMPKIN,
	LEGACY_NETHERRACK,
	LEGACY_SOUL_SAND,
	LEGACY_GLOWSTONE,
	LEGACY_PORTAL,
	LEGACY_JACK_O_LANTERN,
	LEGACY_CAKE_BLOCK,
	LEGACY_DIODE_BLOCK_OFF,
	LEGACY_DIODE_BLOCK_ON,
	LEGACY_STAINED_GLASS,
	LEGACY_TRAP_DOOR,
	LEGACY_MONSTER_EGGS,
	LEGACY_SMOOTH_BRICK,
	LEGACY_HUGE_MUSHROOM_1,
	LEGACY_HUGE_MUSHROOM_2,
	LEGACY_IRON_FENCE,
	LEGACY_THIN_GLASS,
	LEGACY_MELON_BLOCK,
	LEGACY_PUMPKIN_STEM,
	LEGACY_MELON_STEM,
	LEGACY_VINE,
	LEGACY_FENCE_GATE,
	LEGACY_BRICK_STAIRS,
	LEGACY_SMOOTH_STAIRS,
	LEGACY_MYCEL,
	LEGACY_WATER_LILY,
	LEGACY_NETHER_BRICK,
	LEGACY_NETHER_FENCE,
	LEGACY_NETHER_BRICK_STAIRS,
	LEGACY_NETHER_WARTS,
	LEGACY_ENCHANTMENT_TABLE,
	LEGACY_BREWING_STAND,
	LEGACY_CAULDRON,
	LEGACY_ENDER_PORTAL,
	LEGACY_ENDER_PORTAL_FRAME,
	LEGACY_ENDER_STONE,
	LEGACY_DRAGON_EGG,
	LEGACY_REDSTONE_LAMP_OFF,
	LEGACY_REDSTONE_LAMP_ON,
	LEGACY_WOOD_DOUBLE_STEP,
	LEGACY_WOOD_STEP,
	LEGACY_COCOA,
	LEGACY_SANDSTONE_STAIRS,
	LEGACY_EMERALD_ORE,
	LEGACY_ENDER_CHEST,
	LEGACY_TRIPWIRE_HOOK,
	LEGACY_TRIPWIRE,
	LEGACY_EMERALD_BLOCK,
	LEGACY_SPRUCE_WOOD_STAIRS,
	LEGACY_BIRCH_WOOD_STAIRS,
	LEGACY_JUNGLE_WOOD_STAIRS,
	LEGACY_COMMAND,
	LEGACY_BEACON,
	LEGACY_COBBLE_WALL,
	LEGACY_FLOWER_POT,
	LEGACY_CARROT,
	LEGACY_POTATO,
	LEGACY_WOOD_BUTTON,
	LEGACY_SKULL,
	LEGACY_ANVIL,
	LEGACY_TRAPPED_CHEST,
	LEGACY_GOLD_PLATE,
	LEGACY_IRON_PLATE,
	LEGACY_REDSTONE_COMPARATOR_OFF,
	LEGACY_REDSTONE_COMPARATOR_ON,
	LEGACY_DAYLIGHT_DETECTOR,
	LEGACY_REDSTONE_BLOCK,
	LEGACY_QUARTZ_ORE,
	LEGACY_HOPPER,
	LEGACY_QUARTZ_BLOCK,
	LEGACY_QUARTZ_STAIRS,
	LEGACY_ACTIVATOR_RAIL,
	LEGACY_DROPPER,
	LEGACY_STAINED_CLAY,
	LEGACY_STAINED_GLASS_PANE,
	LEGACY_LEAVES_2,
	LEGACY_LOG_2,
	LEGACY_ACACIA_STAIRS,
	LEGACY_DARK_OAK_STAIRS,
	LEGACY_SLIME_BLOCK,
	LEGACY_BARRIER,
	LEGACY_IRON_TRAPDOOR,
	LEGACY_PRISMARINE,
	LEGACY_SEA_LANTERN,
	LEGACY_HAY_BLOCK,
	LEGACY_CARPET,
	LEGACY_HARD_CLAY,
	LEGACY_COAL_BLOCK,
	LEGACY_PACKED_ICE,
	LEGACY_DOUBLE_PLANT,
	LEGACY_STANDING_BANNER,
	LEGACY_WALL_BANNER,
	LEGACY_DAYLIGHT_DETECTOR_INVERTED,
	LEGACY_RED_SANDSTONE,
	LEGACY_RED_SANDSTONE_STAIRS,
	LEGACY_DOUBLE_STONE_SLAB2,
	LEGACY_STONE_SLAB2,
	LEGACY_SPRUCE_FENCE_GATE,
	LEGACY_BIRCH_FENCE_GATE,
	LEGACY_JUNGLE_FENCE_GATE,
	LEGACY_DARK_OAK_FENCE_GATE,
	LEGACY_ACACIA_FENCE_GATE,
	LEGACY_SPRUCE_FENCE,
	LEGACY_BIRCH_FENCE,
	LEGACY_JUNGLE_FENCE,
	LEGACY_DARK_OAK_FENCE,
	LEGACY_ACACIA_FENCE,
	LEGACY_SPRUCE_DOOR,
	LEGACY_BIRCH_DOOR,
	LEGACY_JUNGLE_DOOR,
	LEGACY_ACACIA_DOOR,
	LEGACY_DARK_OAK_DOOR,
	LEGACY_END_ROD,
	LEGACY_CHORUS_PLANT,
	LEGACY_CHORUS_FLOWER,
	LEGACY_PURPUR_BLOCK,
	LEGACY_PURPUR_PILLAR,
	LEGACY_PURPUR_STAIRS,
	LEGACY_PURPUR_DOUBLE_SLAB,
	LEGACY_PURPUR_SLAB,
	LEGACY_END_BRICKS,
	LEGACY_BEETROOT_BLOCK,
	LEGACY_GRASS_PATH,
	LEGACY_END_GATEWAY,
	LEGACY_COMMAND_REPEATING,
	LEGACY_COMMAND_CHAIN,
	LEGACY_FROSTED_ICE,
	LEGACY_MAGMA,
	LEGACY_NETHER_WART_BLOCK,
	LEGACY_RED_NETHER_BRICK,
	LEGACY_BONE_BLOCK,
	LEGACY_STRUCTURE_VOID,
	LEGACY_OBSERVER,
	LEGACY_WHITE_SHULKER_BOX,
	LEGACY_ORANGE_SHULKER_BOX,
	LEGACY_MAGENTA_SHULKER_BOX,
	LEGACY_LIGHT_BLUE_SHULKER_BOX,
	LEGACY_YELLOW_SHULKER_BOX,
	LEGACY_LIME_SHULKER_BOX,
	LEGACY_PINK_SHULKER_BOX,
	LEGACY_GRAY_SHULKER_BOX,
	LEGACY_SILVER_SHULKER_BOX,
	LEGACY_CYAN_SHULKER_BOX,
	LEGACY_PURPLE_SHULKER_BOX,
	LEGACY_BLUE_SHULKER_BOX,
	LEGACY_BROWN_SHULKER_BOX,
	LEGACY_GREEN_SHULKER_BOX,
	LEGACY_RED_SHULKER_BOX,
	LEGACY_BLACK_SHULKER_BOX,
	LEGACY_WHITE_GLAZED_TERRACOTTA,
	LEGACY_ORANGE_GLAZED_TERRACOTTA,
	LEGACY_MAGENTA_GLAZED_TERRACOTTA,
	LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA,
	LEGACY_YELLOW_GLAZED_TERRACOTTA,
	LEGACY_LIME_GLAZED_TERRACOTTA,
	LEGACY_PINK_GLAZED_TERRACOTTA,
	LEGACY_GRAY_GLAZED_TERRACOTTA,
	LEGACY_SILVER_GLAZED_TERRACOTTA,
	LEGACY_CYAN_GLAZED_TERRACOTTA,
	LEGACY_PURPLE_GLAZED_TERRACOTTA,
	LEGACY_BLUE_GLAZED_TERRACOTTA,
	LEGACY_BROWN_GLAZED_TERRACOTTA,
	LEGACY_GREEN_GLAZED_TERRACOTTA,
	LEGACY_RED_GLAZED_TERRACOTTA,
	LEGACY_BLACK_GLAZED_TERRACOTTA,
	LEGACY_CONCRETE,
	LEGACY_CONCRETE_POWDER,
	LEGACY_STRUCTURE_BLOCK,
	LEGACY_IRON_SPADE,
	LEGACY_IRON_PICKAXE,
	LEGACY_IRON_AXE,
	LEGACY_FLINT_AND_STEEL,
	LEGACY_APPLE,
	LEGACY_BOW,
	LEGACY_ARROW,
	LEGACY_COAL,
	LEGACY_DIAMOND,
	LEGACY_IRON_INGOT,
	LEGACY_GOLD_INGOT,
	LEGACY_IRON_SWORD,
	LEGACY_WOOD_SWORD,
	LEGACY_WOOD_SPADE,
	LEGACY_WOOD_PICKAXE,
	LEGACY_WOOD_AXE,
	LEGACY_STONE_SWORD,
	LEGACY_STONE_SPADE,
	LEGACY_STONE_PICKAXE,
	LEGACY_STONE_AXE,
	LEGACY_DIAMOND_SWORD,
	LEGACY_DIAMOND_SPADE,
	LEGACY_DIAMOND_PICKAXE,
	LEGACY_DIAMOND_AXE,
	LEGACY_STICK,
	LEGACY_BOWL,
	LEGACY_MUSHROOM_SOUP,
	LEGACY_GOLD_SWORD,
	LEGACY_GOLD_SPADE,
	LEGACY_GOLD_PICKAXE,
	LEGACY_GOLD_AXE,
	LEGACY_STRING,
	LEGACY_FEATHER,
	LEGACY_SULPHUR,
	LEGACY_WOOD_HOE,
	LEGACY_STONE_HOE,
	LEGACY_IRON_HOE,
	LEGACY_DIAMOND_HOE,
	LEGACY_GOLD_HOE,
	LEGACY_SEEDS,
	LEGACY_WHEAT,
	LEGACY_BREAD,
	LEGACY_LEATHER_HELMET,
	LEGACY_LEATHER_CHESTPLATE,
	LEGACY_LEATHER_LEGGINGS,
	LEGACY_LEATHER_BOOTS,
	LEGACY_CHAINMAIL_HELMET,
	LEGACY_CHAINMAIL_CHESTPLATE,
	LEGACY_CHAINMAIL_LEGGINGS,
	LEGACY_CHAINMAIL_BOOTS,
	LEGACY_IRON_HELMET,
	LEGACY_IRON_CHESTPLATE,
	LEGACY_IRON_LEGGINGS,
	LEGACY_IRON_BOOTS,
	LEGACY_DIAMOND_HELMET,
	LEGACY_DIAMOND_CHESTPLATE,
	LEGACY_DIAMOND_LEGGINGS,
	LEGACY_DIAMOND_BOOTS,
	LEGACY_GOLD_HELMET,
	LEGACY_GOLD_CHESTPLATE,
	LEGACY_GOLD_LEGGINGS,
	LEGACY_GOLD_BOOTS,
	LEGACY_FLINT,
	LEGACY_PORK,
	LEGACY_GRILLED_PORK,
	LEGACY_PAINTING,
	LEGACY_GOLDEN_APPLE,
	LEGACY_SIGN,
	LEGACY_WOOD_DOOR,
	LEGACY_BUCKET,
	LEGACY_WATER_BUCKET,
	LEGACY_LAVA_BUCKET,
	LEGACY_MINECART,
	LEGACY_SADDLE,
	LEGACY_IRON_DOOR,
	LEGACY_REDSTONE,
	LEGACY_SNOW_BALL,
	LEGACY_BOAT,
	LEGACY_LEATHER,
	LEGACY_MILK_BUCKET,
	LEGACY_CLAY_BRICK,
	LEGACY_CLAY_BALL,
	LEGACY_SUGAR_CANE,
	LEGACY_PAPER,
	LEGACY_BOOK,
	LEGACY_SLIME_BALL,
	LEGACY_STORAGE_MINECART,
	LEGACY_POWERED_MINECART,
	LEGACY_EGG,
	LEGACY_COMPASS,
	LEGACY_FISHING_ROD,
	LEGACY_WATCH,
	LEGACY_GLOWSTONE_DUST,
	LEGACY_RAW_FISH,
	LEGACY_COOKED_FISH,
	LEGACY_INK_SACK,
	LEGACY_BONE,
	LEGACY_SUGAR,
	LEGACY_CAKE,
	LEGACY_BED,
	LEGACY_DIODE,
	LEGACY_COOKIE,
	LEGACY_MAP,
	LEGACY_SHEARS,
	LEGACY_MELON,
	LEGACY_PUMPKIN_SEEDS,
	LEGACY_MELON_SEEDS,
	LEGACY_RAW_BEEF,
	LEGACY_COOKED_BEEF,
	LEGACY_RAW_CHICKEN,
	LEGACY_COOKED_CHICKEN,
	LEGACY_ROTTEN_FLESH,
	LEGACY_ENDER_PEARL,
	LEGACY_BLAZE_ROD,
	LEGACY_GHAST_TEAR,
	LEGACY_GOLD_NUGGET,
	LEGACY_NETHER_STALK,
	LEGACY_POTION,
	LEGACY_GLASS_BOTTLE,
	LEGACY_SPIDER_EYE,
	LEGACY_FERMENTED_SPIDER_EYE,
	LEGACY_BLAZE_POWDER,
	LEGACY_MAGMA_CREAM,
	LEGACY_BREWING_STAND_ITEM,
	LEGACY_CAULDRON_ITEM,
	LEGACY_EYE_OF_ENDER,
	LEGACY_SPECKLED_MELON,
	LEGACY_MONSTER_EGG,
	LEGACY_EXP_BOTTLE,
	LEGACY_FIREBALL,
	LEGACY_BOOK_AND_QUILL,
	LEGACY_WRITTEN_BOOK,
	LEGACY_EMERALD,
	LEGACY_ITEM_FRAME,
	LEGACY_FLOWER_POT_ITEM,
	LEGACY_CARROT_ITEM,
	LEGACY_POTATO_ITEM,
	LEGACY_BAKED_POTATO,
	LEGACY_POISONOUS_POTATO,
	LEGACY_EMPTY_MAP,
	LEGACY_GOLDEN_CARROT,
	LEGACY_SKULL_ITEM,
	LEGACY_CARROT_STICK,
	LEGACY_NETHER_STAR,
	LEGACY_PUMPKIN_PIE,
	LEGACY_FIREWORK,
	LEGACY_FIREWORK_CHARGE,
	LEGACY_ENCHANTED_BOOK,
	LEGACY_REDSTONE_COMPARATOR,
	LEGACY_NETHER_BRICK_ITEM,
	LEGACY_QUARTZ,
	LEGACY_EXPLOSIVE_MINECART,
	LEGACY_HOPPER_MINECART,
	LEGACY_PRISMARINE_SHARD,
	LEGACY_PRISMARINE_CRYSTALS,
	LEGACY_RABBIT,
	LEGACY_COOKED_RABBIT,
	LEGACY_RABBIT_STEW,
	LEGACY_RABBIT_FOOT,
	LEGACY_RABBIT_HIDE,
	LEGACY_ARMOR_STAND,
	LEGACY_IRON_BARDING,
	LEGACY_GOLD_BARDING,
	LEGACY_DIAMOND_BARDING,
	LEGACY_LEASH,
	LEGACY_NAME_TAG,
	LEGACY_COMMAND_MINECART,
	LEGACY_MUTTON,
	LEGACY_COOKED_MUTTON,
	LEGACY_BANNER,
	LEGACY_END_CRYSTAL,
	LEGACY_SPRUCE_DOOR_ITEM,
	LEGACY_BIRCH_DOOR_ITEM,
	LEGACY_JUNGLE_DOOR_ITEM,
	LEGACY_ACACIA_DOOR_ITEM,
	LEGACY_DARK_OAK_DOOR_ITEM,
	LEGACY_CHORUS_FRUIT,
	LEGACY_CHORUS_FRUIT_POPPED,
	LEGACY_BEETROOT,
	LEGACY_BEETROOT_SEEDS,
	LEGACY_BEETROOT_SOUP,
	LEGACY_DRAGONS_BREATH,
	LEGACY_SPLASH_POTION,
	LEGACY_SPECTRAL_ARROW,
	LEGACY_TIPPED_ARROW,
	LEGACY_LINGERING_POTION,
	LEGACY_SHIELD,
	LEGACY_ELYTRA,
	LEGACY_BOAT_SPRUCE,
	LEGACY_BOAT_BIRCH,
	LEGACY_BOAT_JUNGLE,
	LEGACY_BOAT_ACACIA,
	LEGACY_BOAT_DARK_OAK,
	LEGACY_TOTEM,
	LEGACY_SHULKER_SHELL,
	LEGACY_IRON_NUGGET,
	LEGACY_KNOWLEDGE_BOOK,
	LEGACY_GOLD_RECORD,
	LEGACY_GREEN_RECORD,
	LEGACY_RECORD_3,
	LEGACY_RECORD_4,
	LEGACY_RECORD_5,
	LEGACY_RECORD_6,
	LEGACY_RECORD_7,
	LEGACY_RECORD_8,
	LEGACY_RECORD_9,
	LEGACY_RECORD_10,
	LEGACY_RECORD_11,
	LEGACY_RECORD_12,
}
namespace Material {
	function values(): Material[]
	function valueOf(arg0: String): Material
	function isRecord(): boolean
	function getKey(): NamespacedKey
	function getId(): int
	function getMaterial(arg0: String, arg1: boolean): Material
	function getMaterial(arg0: String): Material
	function getMaxStackSize(): int
	function getNewData(arg0: byte): MaterialData
	function isLegacy(): boolean
	function matchMaterial(arg0: String, arg1: boolean): Material
	function matchMaterial(arg0: String): Material
	function isAir(): boolean
	function isEdible(): boolean
	function isBlock(): boolean
	function isBurnable(): boolean
	function getMaxDurability(): short
	function isFuel(): boolean
	function isOccluding(): boolean
	function createBlockData(): BlockData
	function createBlockData(arg0: Consumer): BlockData
	function createBlockData(arg0: String): BlockData
	function isTransparent(): boolean
	function isItem(): boolean
	function isSolid(): boolean
	function isFlammable(): boolean
	function hasGravity(): boolean
	function getEquipmentSlot(): EquipmentSlot
	function isInteractable(): boolean
	function getBlastResistance(): float
	function getSlipperiness(): float
	function getHardness(): float
	function getCreativeCategory(): CreativeCategory
	function getCraftingRemainingItem(): Material
	function getDefaultAttributeModifiers(arg0: EquipmentSlot): Multimap
	function getData(): Class
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	BROWN,
	WHITE,
	BLACK,
	BLACK_AND_WHITE,
	GOLD,
	SALT_AND_PEPPER,
	THE_KILLER_BUNNY,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Axis {
	X,
	Y,
	Z,
}
namespace Axis {
	function values(): Axis[]
	function valueOf(arg0: String): Axis
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum MushroomBlockTexture {
	ALL_PORES,
	CAP_NORTH_WEST,
	CAP_NORTH,
	CAP_NORTH_EAST,
	CAP_WEST,
	CAP_TOP,
	CAP_EAST,
	CAP_SOUTH_WEST,
	CAP_SOUTH,
	CAP_SOUTH_EAST,
	STEM_SIDES,
	ALL_CAP,
	ALL_STEM,
}
namespace MushroomBlockTexture {
	function values(): MushroomBlockTexture[]
	function valueOf(arg0: String): MushroomBlockTexture
	function getByData(arg0: byte): MushroomBlockTexture
	function getCapFace(): BlockFace
	function getCapByFace(arg0: BlockFace): MushroomBlockTexture
	function getData(): byte
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum PistonMoveReaction {
	MOVE,
	BREAK,
	BLOCK,
	IGNORE,
	PUSH_ONLY,
}
namespace PistonMoveReaction {
	function values(): PistonMoveReaction[]
	function valueOf(arg0: String): PistonMoveReaction
	function getId(): int
	function getById(arg0: int): PistonMoveReaction
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum SkullType {
	SKELETON,
	WITHER,
	ZOMBIE,
	PLAYER,
	CREEPER,
	DRAGON,
}
namespace SkullType {
	function values(): SkullType[]
	function valueOf(arg0: String): SkullType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum IgniteCause {
	LAVA,
	FLINT_AND_STEEL,
	SPREAD,
	LIGHTNING,
	FIREBALL,
	ENDER_CRYSTAL,
	EXPLOSION,
	ARROW,
}
namespace IgniteCause {
	function values(): IgniteCause[]
	function valueOf(arg0: String): IgniteCause
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Variant {
	TEMPERATE,
	WARM,
	COLD,
}
namespace Variant {
	function values(): Variant[]
	function valueOf(arg0: String): Variant
	function getKey(): NamespacedKey
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum NameTagVisibility {
	ALWAYS,
	NEVER,
	HIDE_FOR_OTHER_TEAMS,
	HIDE_FOR_OWN_TEAM,
}
namespace NameTagVisibility {
	function values(): NameTagVisibility[]
	function valueOf(arg0: String): NameTagVisibility
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum MainHand {
	LEFT,
	RIGHT,
}
namespace MainHand {
	function values(): MainHand[]
	function valueOf(arg0: String): MainHand
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Fluid {
	WATER,
	FLOWING_WATER,
	LAVA,
	FLOWING_LAVA,
}
namespace Fluid {
	function values(): Fluid[]
	function valueOf(arg0: String): Fluid
	function getKey(): NamespacedKey
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum LoadType {
	STARTUP,
	RELOAD,
}
namespace LoadType {
	function values(): LoadType[]
	function valueOf(arg0: String): LoadType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	NAME,
	IP,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Flags {
	UTF8,
}
namespace Flags {
	function values(): Flags[]
	function valueOf(arg0: String): Flags
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum BarFlag {
	DARKEN_SKY,
	PLAY_BOSS_MUSIC,
	CREATE_FOG,
}
namespace BarFlag {
	function values(): BarFlag[]
	function valueOf(arg0: String): BarFlag
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Option {
	NAME_TAG_VISIBILITY,
	DEATH_MESSAGE_VISIBILITY,
	COLLISION_RULE,
}
namespace Option {
	function values(): Option[]
	function valueOf(arg0: String): Option
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum RenderType {
	INTEGER,
	HEARTS,
}
namespace RenderType {
	function values(): RenderType[]
	function valueOf(arg0: String): RenderType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum WarningState {
	ON,
	OFF,
	DEFAULT,
}
namespace WarningState {
	function value(arg0: String): WarningState
	function values(): WarningState[]
	function valueOf(arg0: String): WarningState
	function printFor(arg0: Warning): boolean
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum BlockSupport {
	FULL,
	CENTER,
	RIGID,
}
namespace BlockSupport {
	function values(): BlockSupport[]
	function valueOf(arg0: String): BlockSupport
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Thickness {
	TIP_MERGE,
	TIP,
	FRUSTUM,
	MIDDLE,
	BASE,
}
namespace Thickness {
	function values(): Thickness[]
	function valueOf(arg0: String): Thickness
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Shape {
	STRAIGHT,
	INNER_LEFT,
	INNER_RIGHT,
	OUTER_LEFT,
	OUTER_RIGHT,
}
namespace Shape {
	function values(): Shape[]
	function valueOf(arg0: String): Shape
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Color {
	CREAMY,
	WHITE,
	BROWN,
	GRAY,
}
namespace Color {
	function values(): Color[]
	function valueOf(arg0: String): Color
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum TeleportCause {
	ENDER_PEARL,
	COMMAND,
	PLUGIN,
	NETHER_PORTAL,
	END_PORTAL,
	SPECTATE,
	END_GATEWAY,
	CHORUS_FRUIT,
	UNKNOWN,
}
namespace TeleportCause {
	function values(): TeleportCause[]
	function valueOf(arg0: String): TeleportCause
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Scale {
	CLOSEST,
	CLOSE,
	NORMAL,
	FAR,
	FARTHEST,
}
namespace Scale {
	function values(): Scale[]
	function valueOf(arg0: String): Scale
	function valueOf(arg0: byte): Scale
	function getValue(): byte
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Pattern {
	KOB,
	SUNSTREAK,
	SNOOPER,
	DASHER,
	BRINELY,
	SPOTTY,
	FLOPPER,
	STRIPEY,
	GLITTER,
	BLOCKFISH,
	BETTY,
	CLAYFISH,
}
namespace Pattern {
	function values(): Pattern[]
	function valueOf(arg0: String): Pattern
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum SkeletonType {
	NORMAL,
	WITHER,
	STRAY,
}
namespace SkeletonType {
	function values(): SkeletonType[]
	function valueOf(arg0: String): SkeletonType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Mode {
	SAVE,
	LOAD,
	CORNER,
	DATA,
}
namespace Mode {
	function values(): Mode[]
	function valueOf(arg0: String): Mode
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Profession {
	NONE,
	ARMORER,
	BUTCHER,
	CARTOGRAPHER,
	CLERIC,
	FARMER,
	FISHERMAN,
	FLETCHER,
	LEATHERWORKER,
	LIBRARIAN,
	MASON,
	NITWIT,
	SHEPHERD,
	TOOLSMITH,
	WEAPONSMITH,
}
namespace Profession {
	function values(): Profession[]
	function valueOf(arg0: String): Profession
	function getKey(): NamespacedKey
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Result {
	ALLOWED,
	KICK_FULL,
	KICK_BANNED,
	KICK_WHITELIST,
	KICK_OTHER,
}
namespace Result {
	function values(): Result[]
	function valueOf(arg0: String): Result
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum SlotType {
	RESULT,
	CRAFTING,
	ARMOR,
	CONTAINER,
	QUICKBAR,
	OUTSIDE,
	FUEL,
}
namespace SlotType {
	function values(): SlotType[]
	function valueOf(arg0: String): SlotType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Variant {
	HORSE,
	DONKEY,
	MULE,
	UNDEAD_HORSE,
	SKELETON_HORSE,
	LLAMA,
}
namespace Variant {
	function values(): Variant[]
	function valueOf(arg0: String): Variant
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum SoundCategory {
	MASTER,
	MUSIC,
	RECORDS,
	WEATHER,
	BLOCKS,
	HOSTILE,
	NEUTRAL,
	PLAYERS,
	AMBIENT,
	VOICE,
}
namespace SoundCategory {
	function values(): SoundCategory[]
	function valueOf(arg0: String): SoundCategory
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum AttachedFace {
	FLOOR,
	WALL,
	CEILING,
}
namespace AttachedFace {
	function values(): AttachedFace[]
	function valueOf(arg0: String): AttachedFace
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	TOP,
	BOTTOM,
	DOUBLE,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Status {
	SUCCESSFULLY_LOADED,
	DECLINED,
	FAILED_DOWNLOAD,
	ACCEPTED,
}
namespace Status {
	function values(): Status[]
	function valueOf(arg0: String): Status
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum TargetReason {
	TARGET_DIED,
	CLOSEST_PLAYER,
	TARGET_ATTACKED_ENTITY,
	PIG_ZOMBIE_TARGET,
	FORGOT_TARGET,
	TARGET_ATTACKED_OWNER,
	OWNER_ATTACKED_TARGET,
	RANDOM_TARGET,
	DEFEND_VILLAGE,
	TARGET_ATTACKED_NEARBY_ENTITY,
	REINFORCEMENT_TARGET,
	COLLISION,
	CUSTOM,
	CLOSEST_ENTITY,
	FOLLOW_LEADER,
	TEMPT,
	UNKNOWN,
}
namespace TargetReason {
	function values(): TargetReason[]
	function valueOf(arg0: String): TargetReason
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Status {
	IN_WATER,
	UNDER_WATER,
	UNDER_FLOWING_WATER,
	ON_LAND,
	IN_AIR,
}
namespace Status {
	function values(): Status[]
	function valueOf(arg0: String): Status
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum HeightMap {
	MOTION_BLOCKING,
	MOTION_BLOCKING_NO_LEAVES,
	OCEAN_FLOOR,
	OCEAN_FLOOR_WG,
	WORLD_SURFACE,
	WORLD_SURFACE_WG,
}
namespace HeightMap {
	function values(): HeightMap[]
	function valueOf(arg0: String): HeightMap
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum CocoaPlantSize {
	SMALL,
	MEDIUM,
	LARGE,
}
namespace CocoaPlantSize {
	function values(): CocoaPlantSize[]
	function valueOf(arg0: String): CocoaPlantSize
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	UNTYPED,
	ITEM,
	BLOCK,
	ENTITY,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Gene {
	NORMAL,
	LAZY,
	WORRIED,
	PLAYFUL,
	BROWN,
	WEAK,
	AGGRESSIVE,
}
namespace Gene {
	function values(): Gene[]
	function valueOf(arg0: String): Gene
	function isRecessive(): boolean
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Spell {
	NONE,
	SUMMON,
	FANGS,
	WOLOLO,
	DISAPPEAR,
	BLINDNESS,
}
namespace Spell {
	function values(): Spell[]
	function valueOf(arg0: String): Spell
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum BedEnterResult {
	OK,
	NOT_POSSIBLE_HERE,
	NOT_POSSIBLE_NOW,
	TOO_FAR_AWAY,
	NOT_SAFE,
	OTHER_PROBLEM,
}
namespace BedEnterResult {
	function values(): BedEnterResult[]
	function valueOf(arg0: String): BedEnterResult
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum EventPriority {
	LOWEST,
	LOW,
	NORMAL,
	HIGH,
	HIGHEST,
	MONITOR,
}
namespace EventPriority {
	function values(): EventPriority[]
	function valueOf(arg0: String): EventPriority
	function getSlot(): int
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum LockType {
	ADDING_OR_CHANGING,
	REMOVING_OR_CHANGING,
	ADDING,
}
namespace LockType {
	function values(): LockType[]
	function valueOf(arg0: String): LockType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum UsageMode {
	SAVE,
	LOAD,
	CORNER,
	DATA,
}
namespace UsageMode {
	function values(): UsageMode[]
	function valueOf(arg0: String): UsageMode
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Pose {
	STANDING,
	FALL_FLYING,
	SLEEPING,
	SWIMMING,
	SPIN_ATTACK,
	SNEAKING,
	LONG_JUMPING,
	DYING,
	CROAKING,
	USING_TONGUE,
	ROARING,
	SNIFFING,
	EMERGING,
	DIGGING,
}
namespace Pose {
	function values(): Pose[]
	function valueOf(arg0: String): Pose
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	SOUND,
	VISUAL,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum UnleashReason {
	HOLDER_GONE,
	PLAYER_UNLEASH,
	DISTANCE,
	UNKNOWN,
}
namespace UnleashReason {
	function values(): UnleashReason[]
	function valueOf(arg0: String): UnleashReason
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum DyeColor {
	WHITE,
	ORANGE,
	MAGENTA,
	LIGHT_BLUE,
	YELLOW,
	LIME,
	PINK,
	GRAY,
	LIGHT_GRAY,
	CYAN,
	PURPLE,
	BLUE,
	BROWN,
	GREEN,
	RED,
	BLACK,
}
namespace DyeColor {
	function values(): DyeColor[]
	function valueOf(arg0: String): DyeColor
	function getColor(): Color
	function getByColor(arg0: Color): DyeColor
	function legacyValueOf(arg0: String): DyeColor
	function getByFireworkColor(arg0: Color): DyeColor
	function getWoolData(): byte
	function getDyeData(): byte
	function getFireworkColor(): Color
	function getByWoolData(arg0: byte): DyeColor
	function getByDyeData(arg0: byte): DyeColor
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum ItemFlag {
	HIDE_ENCHANTS,
	HIDE_ATTRIBUTES,
	HIDE_UNBREAKABLE,
	HIDE_DESTROYS,
	HIDE_PLACED_ON,
	HIDE_POTION_EFFECTS,
	HIDE_DYE,
}
namespace ItemFlag {
	function values(): ItemFlag[]
	function valueOf(arg0: String): ItemFlag
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum PortalType {
	NETHER,
	ENDER,
	CUSTOM,
}
namespace PortalType {
	function values(): PortalType[]
	function valueOf(arg0: String): PortalType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum EntityEffect {
	ARROW_PARTICLES,
	RABBIT_JUMP,
	HURT,
	DEATH,
	WOLF_SMOKE,
	WOLF_HEARTS,
	WOLF_SHAKE,
	SHEEP_EAT,
	IRON_GOLEM_ROSE,
	VILLAGER_HEART,
	VILLAGER_ANGRY,
	VILLAGER_HAPPY,
	WITCH_MAGIC,
	ZOMBIE_TRANSFORM,
	FIREWORK_EXPLODE,
	LOVE_HEARTS,
	SQUID_ROTATE,
	ENTITY_POOF,
	GUARDIAN_TARGET,
	SHIELD_BLOCK,
	SHIELD_BREAK,
	ARMOR_STAND_HIT,
	THORNS_HURT,
	IRON_GOLEM_SHEATH,
	TOTEM_RESURRECT,
	HURT_DROWN,
	HURT_EXPLOSION,
	DOLPHIN_FED,
	RAVAGER_STUNNED,
	CAT_TAME_FAIL,
	CAT_TAME_SUCCESS,
	VILLAGER_SPLASH,
	PLAYER_BAD_OMEN_RAID,
	HURT_BERRY_BUSH,
	FOX_CHEW,
	TELEPORT_ENDER,
	BREAK_EQUIPMENT_MAIN_HAND,
	BREAK_EQUIPMENT_OFF_HAND,
	BREAK_EQUIPMENT_HELMET,
	BREAK_EQUIPMENT_CHESTPLATE,
	BREAK_EQUIPMENT_LEGGINGS,
	BREAK_EQUIPMENT_BOOTS,
}
namespace EntityEffect {
	function values(): EntityEffect[]
	function valueOf(arg0: String): EntityEffect
	function getApplicable(): Class
	function getData(): byte
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Hinge {
	LEFT,
	RIGHT,
}
namespace Hinge {
	function values(): Hinge[]
	function valueOf(arg0: String): Hinge
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum PluginChannelDirection {
	INCOMING,
	OUTGOING,
}
namespace PluginChannelDirection {
	function values(): PluginChannelDirection[]
	function valueOf(arg0: String): PluginChannelDirection
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Half {
	TOP,
	BOTTOM,
}
namespace Half {
	function values(): Half[]
	function valueOf(arg0: String): Half
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum ConversationState {
	UNSTARTED,
	STARTED,
	ABANDONED,
}
namespace ConversationState {
	function values(): ConversationState[]
	function valueOf(arg0: String): ConversationState
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Statistic {
	DAMAGE_DEALT,
	DAMAGE_TAKEN,
	DEATHS,
	MOB_KILLS,
	PLAYER_KILLS,
	FISH_CAUGHT,
	ANIMALS_BRED,
	LEAVE_GAME,
	JUMP,
	DROP_COUNT,
	DROP,
	PICKUP,
	PLAY_ONE_MINUTE,
	TOTAL_WORLD_TIME,
	WALK_ONE_CM,
	WALK_ON_WATER_ONE_CM,
	FALL_ONE_CM,
	SNEAK_TIME,
	CLIMB_ONE_CM,
	FLY_ONE_CM,
	WALK_UNDER_WATER_ONE_CM,
	MINECART_ONE_CM,
	BOAT_ONE_CM,
	PIG_ONE_CM,
	HORSE_ONE_CM,
	SPRINT_ONE_CM,
	CROUCH_ONE_CM,
	AVIATE_ONE_CM,
	MINE_BLOCK,
	USE_ITEM,
	BREAK_ITEM,
	CRAFT_ITEM,
	KILL_ENTITY,
	ENTITY_KILLED_BY,
	TIME_SINCE_DEATH,
	TALKED_TO_VILLAGER,
	TRADED_WITH_VILLAGER,
	CAKE_SLICES_EATEN,
	CAULDRON_FILLED,
	CAULDRON_USED,
	ARMOR_CLEANED,
	BANNER_CLEANED,
	BREWINGSTAND_INTERACTION,
	BEACON_INTERACTION,
	DROPPER_INSPECTED,
	HOPPER_INSPECTED,
	DISPENSER_INSPECTED,
	NOTEBLOCK_PLAYED,
	NOTEBLOCK_TUNED,
	FLOWER_POTTED,
	TRAPPED_CHEST_TRIGGERED,
	ENDERCHEST_OPENED,
	ITEM_ENCHANTED,
	RECORD_PLAYED,
	FURNACE_INTERACTION,
	CRAFTING_TABLE_INTERACTION,
	CHEST_OPENED,
	SLEEP_IN_BED,
	SHULKER_BOX_OPENED,
	TIME_SINCE_REST,
	SWIM_ONE_CM,
	DAMAGE_DEALT_ABSORBED,
	DAMAGE_DEALT_RESISTED,
	DAMAGE_BLOCKED_BY_SHIELD,
	DAMAGE_ABSORBED,
	DAMAGE_RESISTED,
	CLEAN_SHULKER_BOX,
	OPEN_BARREL,
	INTERACT_WITH_BLAST_FURNACE,
	INTERACT_WITH_SMOKER,
	INTERACT_WITH_LECTERN,
	INTERACT_WITH_CAMPFIRE,
	INTERACT_WITH_CARTOGRAPHY_TABLE,
	INTERACT_WITH_LOOM,
	INTERACT_WITH_STONECUTTER,
	BELL_RING,
	RAID_TRIGGER,
	RAID_WIN,
	INTERACT_WITH_ANVIL,
	INTERACT_WITH_GRINDSTONE,
	TARGET_HIT,
	INTERACT_WITH_SMITHING_TABLE,
	STRIDER_ONE_CM,
}
namespace Statistic {
	function values(): Statistic[]
	function valueOf(arg0: String): Statistic
	function getKey(): NamespacedKey
	function getType(): Type
	function isBlock(): boolean
	function isSubstatistic(): boolean
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum NetherWartsState {
	SEEDED,
	STAGE_ONE,
	STAGE_TWO,
	RIPE,
}
namespace NetherWartsState {
	function values(): NetherWartsState[]
	function valueOf(arg0: String): NetherWartsState
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum CropState {
	SEEDED,
	GERMINATED,
	VERY_SMALL,
	SMALL,
	MEDIUM,
	TALL,
	VERY_TALL,
	RIPE,
}
namespace CropState {
	function values(): CropState[]
	function valueOf(arg0: String): CropState
	function getByData(arg0: byte): CropState
	function getData(): byte
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Spell {
	NONE,
	SUMMON_VEX,
	FANGS,
	WOLOLO,
	DISAPPEAR,
	BLINDNESS,
}
namespace Spell {
	function values(): Spell[]
	function valueOf(arg0: String): Spell
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Environment {
	NORMAL,
	NETHER,
	THE_END,
	CUSTOM,
}
namespace Environment {
	function values(): Environment[]
	function valueOf(arg0: String): Environment
	function getId(): int
	function getEnvironment(arg0: int): Environment
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum BlockFace {
	NORTH,
	EAST,
	SOUTH,
	WEST,
	UP,
	DOWN,
	NORTH_EAST,
	NORTH_WEST,
	SOUTH_EAST,
	SOUTH_WEST,
	WEST_NORTH_WEST,
	NORTH_NORTH_WEST,
	NORTH_NORTH_EAST,
	EAST_NORTH_EAST,
	EAST_SOUTH_EAST,
	SOUTH_SOUTH_EAST,
	SOUTH_SOUTH_WEST,
	WEST_SOUTH_WEST,
	SELF,
}
namespace BlockFace {
	function values(): BlockFace[]
	function valueOf(arg0: String): BlockFace
	function getModX(): int
	function getModY(): int
	function getOppositeFace(): BlockFace
	function getModZ(): int
	function isCartesian(): boolean
	function getDirection(): Vector
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Art {
	KEBAB,
	AZTEC,
	ALBAN,
	AZTEC2,
	BOMB,
	PLANT,
	WASTELAND,
	POOL,
	COURBET,
	SEA,
	SUNSET,
	CREEBET,
	WANDERER,
	GRAHAM,
	MATCH,
	BUST,
	STAGE,
	VOID,
	SKULL_AND_ROSES,
	WITHER,
	FIGHTERS,
	POINTER,
	PIGSCENE,
	BURNING_SKULL,
	SKELETON,
	DONKEY_KONG,
	EARTH,
	WIND,
	WATER,
	FIRE,
}
namespace Art {
	function values(): Art[]
	function valueOf(arg0: String): Art
	function getKey(): NamespacedKey
	function getId(): int
	function getByName(arg0: String): Art
	function getById(arg0: int): Art
	function getBlockHeight(): int
	function getBlockWidth(): int
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum PlayerAnimationType {
	ARM_SWING,
	OFF_ARM_SWING,
}
namespace PlayerAnimationType {
	function values(): PlayerAnimationType[]
	function valueOf(arg0: String): PlayerAnimationType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum PluginLoadOrder {
	STARTUP,
	POSTWORLD,
}
namespace PluginLoadOrder {
	function values(): PluginLoadOrder[]
	function valueOf(arg0: String): PluginLoadOrder
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Biome {
	OCEAN,
	PLAINS,
	DESERT,
	WINDSWEPT_HILLS,
	FOREST,
	TAIGA,
	SWAMP,
	MANGROVE_SWAMP,
	RIVER,
	NETHER_WASTES,
	THE_END,
	FROZEN_OCEAN,
	FROZEN_RIVER,
	SNOWY_PLAINS,
	MUSHROOM_FIELDS,
	BEACH,
	JUNGLE,
	SPARSE_JUNGLE,
	DEEP_OCEAN,
	STONY_SHORE,
	SNOWY_BEACH,
	BIRCH_FOREST,
	DARK_FOREST,
	SNOWY_TAIGA,
	OLD_GROWTH_PINE_TAIGA,
	WINDSWEPT_FOREST,
	SAVANNA,
	SAVANNA_PLATEAU,
	BADLANDS,
	WOODED_BADLANDS,
	SMALL_END_ISLANDS,
	END_MIDLANDS,
	END_HIGHLANDS,
	END_BARRENS,
	WARM_OCEAN,
	LUKEWARM_OCEAN,
	COLD_OCEAN,
	DEEP_LUKEWARM_OCEAN,
	DEEP_COLD_OCEAN,
	DEEP_FROZEN_OCEAN,
	THE_VOID,
	SUNFLOWER_PLAINS,
	WINDSWEPT_GRAVELLY_HILLS,
	FLOWER_FOREST,
	ICE_SPIKES,
	OLD_GROWTH_BIRCH_FOREST,
	OLD_GROWTH_SPRUCE_TAIGA,
	WINDSWEPT_SAVANNA,
	ERODED_BADLANDS,
	BAMBOO_JUNGLE,
	SOUL_SAND_VALLEY,
	CRIMSON_FOREST,
	WARPED_FOREST,
	BASALT_DELTAS,
	DRIPSTONE_CAVES,
	LUSH_CAVES,
	DEEP_DARK,
	MEADOW,
	GROVE,
	SNOWY_SLOPES,
	FROZEN_PEAKS,
	JAGGED_PEAKS,
	STONY_PEAKS,
	CUSTOM,
}
namespace Biome {
	function values(): Biome[]
	function valueOf(arg0: String): Biome
	function getKey(): NamespacedKey
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum PowerCause {
	LIGHTNING,
	SET_ON,
	SET_OFF,
}
namespace PowerCause {
	function values(): PowerCause[]
	function valueOf(arg0: String): PowerCause
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum CoalType {
	COAL,
	CHARCOAL,
}
namespace CoalType {
	function values(): CoalType[]
	function valueOf(arg0: String): CoalType
	function getByData(arg0: byte): CoalType
	function getData(): byte
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Phase {
	CIRCLING,
	STRAFING,
	FLY_TO_PORTAL,
	LAND_ON_PORTAL,
	LEAVE_PORTAL,
	BREATH_ATTACK,
	SEARCH_FOR_BREATH_ATTACK_TARGET,
	ROAR_BEFORE_ATTACK,
	CHARGE_PLAYER,
	DYING,
	HOVER,
}
namespace Phase {
	function values(): Phase[]
	function valueOf(arg0: String): Phase
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum RespawnPhase {
	START,
	PREPARING_TO_SUMMON_PILLARS,
	SUMMONING_PILLARS,
	SUMMONING_DRAGON,
	END,
	NONE,
}
namespace RespawnPhase {
	function values(): RespawnPhase[]
	function valueOf(arg0: String): RespawnPhase
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum PickupStatus {
	DISALLOWED,
	ALLOWED,
	CREATIVE_ONLY,
}
namespace PickupStatus {
	function values(): PickupStatus[]
	function valueOf(arg0: String): PickupStatus
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	SINGLE,
	LEFT,
	RIGHT,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Difficulty {
	PEACEFUL,
	EASY,
	NORMAL,
	HARD,
}
namespace Difficulty {
	function values(): Difficulty[]
	function valueOf(arg0: String): Difficulty
	function getValue(): int
	function getByValue(arg0: int): Difficulty
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	NORMAL,
	STICKY,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	DESERT,
	JUNGLE,
	PLAINS,
	SAVANNA,
	SNOW,
	SWAMP,
	TAIGA,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function getKey(): NamespacedKey
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum CreateReason {
	FIRE,
	NETHER_PAIR,
	END_PLATFORM,
}
namespace CreateReason {
	function values(): CreateReason[]
	function valueOf(arg0: String): CreateReason
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Instrument {
	PIANO,
	BASS_DRUM,
	SNARE_DRUM,
	STICKS,
	BASS_GUITAR,
	FLUTE,
	BELL,
	GUITAR,
	CHIME,
	XYLOPHONE,
	IRON_XYLOPHONE,
	COW_BELL,
	DIDGERIDOO,
	BIT,
	BANJO,
	PLING,
}
namespace Instrument {
	function values(): Instrument[]
	function valueOf(arg0: String): Instrument
	function getType(): byte
	function getByType(arg0: byte): Instrument
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Reason {
	PEACE,
	TIMEOUT,
	FINISHED,
	UNSPAWNABLE,
	NOT_IN_VILLAGE,
}
namespace Reason {
	function values(): Reason[]
	function valueOf(arg0: String): Reason
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Part {
	HEAD,
	FOOT,
}
namespace Part {
	function values(): Part[]
	function valueOf(arg0: String): Part
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum TransformReason {
	CURED,
	FROZEN,
	INFECTION,
	DROWNED,
	SHEARED,
	LIGHTNING,
	SPLIT,
	PIGLIN_ZOMBIFIED,
	METAMORPHOSIS,
	UNKNOWN,
}
namespace TransformReason {
	function values(): TransformReason[]
	function valueOf(arg0: String): TransformReason
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum LootTables {
	EMPTY,
	ABANDONED_MINESHAFT,
	BURIED_TREASURE,
	DESERT_PYRAMID,
	END_CITY_TREASURE,
	IGLOO_CHEST,
	JUNGLE_TEMPLE,
	JUNGLE_TEMPLE_DISPENSER,
	NETHER_BRIDGE,
	PILLAGER_OUTPOST,
	BASTION_TREASURE,
	BASTION_OTHER,
	BASTION_BRIDGE,
	BASTION_HOGLIN_STABLE,
	ANCIENT_CITY,
	ANCIENT_CITY_ICE_BOX,
	RUINED_PORTAL,
	SHIPWRECK_MAP,
	SHIPWRECK_SUPPLY,
	SHIPWRECK_TREASURE,
	SIMPLE_DUNGEON,
	SPAWN_BONUS_CHEST,
	STRONGHOLD_CORRIDOR,
	STRONGHOLD_CROSSING,
	STRONGHOLD_LIBRARY,
	UNDERWATER_RUIN_BIG,
	UNDERWATER_RUIN_SMALL,
	VILLAGE_ARMORER,
	VILLAGE_BUTCHER,
	VILLAGE_CARTOGRAPHER,
	VILLAGE_DESERT_HOUSE,
	VILLAGE_FISHER,
	VILLAGE_FLETCHER,
	VILLAGE_MASON,
	VILLAGE_PLAINS_HOUSE,
	VILLAGE_SAVANNA_HOUSE,
	VILLAGE_SHEPHERD,
	VILLAGE_SNOWY_HOUSE,
	VILLAGE_TAIGA_HOUSE,
	VILLAGE_TANNERY,
	VILLAGE_TEMPLE,
	VILLAGE_TOOLSMITH,
	VILLAGE_WEAPONSMITH,
	WOODLAND_MANSION,
	ARMOR_STAND,
	AXOLOTL,
	BAT,
	BEE,
	BLAZE,
	CAT,
	CAVE_SPIDER,
	CHICKEN,
	COD,
	COW,
	CREEPER,
	DOLPHIN,
	DONKEY,
	DROWNED,
	ELDER_GUARDIAN,
	ENDER_DRAGON,
	ENDERMAN,
	ENDERMITE,
	EVOKER,
	FOX,
	GHAST,
	GIANT,
	GLOW_SQUID,
	GOAT,
	GUARDIAN,
	HOGLIN,
	HORSE,
	HUSK,
	ILLUSIONER,
	IRON_GOLEM,
	LLAMA,
	MAGMA_CUBE,
	MOOSHROOM,
	MULE,
	OCELOT,
	PANDA,
	PARROT,
	PHANTOM,
	PIG,
	PIGLIN,
	PIGLIN_BRUTE,
	PILLAGER,
	PLAYER,
	POLAR_BEAR,
	PUFFERFISH,
	RABBIT,
	RAVAGER,
	SALMON,
	SHULKER,
	SILVERFISH,
	SKELETON,
	SKELETON_HORSE,
	SLIME,
	SNOW_GOLEM,
	SPIDER,
	SQUID,
	STRAY,
	STRIDER,
	TRADER_LLAMA,
	TROPICAL_FISH,
	TURTLE,
	VEX,
	VILLAGER,
	VINDICATOR,
	WANDERING_TRADER,
	WITCH,
	WITHER,
	WITHER_SKELETON,
	WOLF,
	ZOGLIN,
	ZOMBIE,
	ZOMBIE_HORSE,
	ZOMBIE_VILLAGER,
	ZOMBIFIED_PIGLIN,
	ARMORER_GIFT,
	BUTCHER_GIFT,
	CARTOGRAPHER_GIFT,
	CAT_MORNING_GIFT,
	CLERIC_GIFT,
	FARMER_GIFT,
	FISHERMAN_GIFT,
	FISHING,
	FISHING_FISH,
	FISHING_JUNK,
	FISHING_TREASURE,
	FLETCHER_GIFT,
	LEATHERWORKER_GIFT,
	LIBRARIAN_GIFT,
	MASON_GIFT,
	SHEPHERD_GIFT,
	TOOLSMITH_GIFT,
	WEAPONSMITH_GIFT,
	PIGLIN_BARTERING,
	SHEEP,
	SHEEP_BLACK,
	SHEEP_BLUE,
	SHEEP_BROWN,
	SHEEP_CYAN,
	SHEEP_GRAY,
	SHEEP_GREEN,
	SHEEP_LIGHT_BLUE,
	SHEEP_LIGHT_GRAY,
	SHEEP_LIME,
	SHEEP_MAGENTA,
	SHEEP_ORANGE,
	SHEEP_PINK,
	SHEEP_PURPLE,
	SHEEP_RED,
	SHEEP_WHITE,
	SHEEP_YELLOW,
}
namespace LootTables {
	function values(): LootTables[]
	function valueOf(arg0: String): LootTables
	function getKey(): NamespacedKey
	function getLootTable(): LootTable
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum SpawnReason {
	NATURAL,
	JOCKEY,
	CHUNK_GEN,
	SPAWNER,
	EGG,
	SPAWNER_EGG,
	LIGHTNING,
	BUILD_SNOWMAN,
	BUILD_IRONGOLEM,
	BUILD_WITHER,
	VILLAGE_DEFENSE,
	VILLAGE_INVASION,
	BREEDING,
	SLIME_SPLIT,
	REINFORCEMENTS,
	NETHER_PORTAL,
	DISPENSE_EGG,
	INFECTION,
	CURED,
	OCELOT_BABY,
	SILVERFISH_BLOCK,
	MOUNT,
	TRAP,
	ENDER_PEARL,
	SHOULDER_ENTITY,
	DROWNED,
	SHEARED,
	EXPLOSION,
	RAID,
	PATROL,
	BEEHIVE,
	PIGLIN_ZOMBIFIED,
	SPELL,
	FROZEN,
	METAMORPHOSIS,
	COMMAND,
	CUSTOM,
	DEFAULT,
}
namespace SpawnReason {
	function values(): SpawnReason[]
	function valueOf(arg0: String): SpawnReason
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum DamageCause {
	CONTACT,
	ENTITY_ATTACK,
	ENTITY_SWEEP_ATTACK,
	PROJECTILE,
	SUFFOCATION,
	FALL,
	FIRE,
	FIRE_TICK,
	MELTING,
	LAVA,
	DROWNING,
	BLOCK_EXPLOSION,
	ENTITY_EXPLOSION,
	VOID,
	LIGHTNING,
	SUICIDE,
	STARVATION,
	POISON,
	MAGIC,
	WITHER,
	FALLING_BLOCK,
	THORNS,
	DRAGON_BREATH,
	CUSTOM,
	FLY_INTO_WALL,
	HOT_FLOOR,
	CRAMMING,
	DRYOUT,
	FREEZE,
	SONIC_BOOM,
}
namespace DamageCause {
	function values(): DamageCause[]
	function valueOf(arg0: String): DamageCause
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum ServicePriority {
	Lowest,
	Low,
	Normal,
	High,
	Highest,
}
namespace ServicePriority {
	function values(): ServicePriority[]
	function valueOf(arg0: String): ServicePriority
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Phase {
	INACTIVE,
	ACTIVE,
	COOLDOWN,
}
namespace Phase {
	function values(): Phase[]
	function valueOf(arg0: String): Phase
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum PotionType {
	UNCRAFTABLE,
	WATER,
	MUNDANE,
	THICK,
	AWKWARD,
	NIGHT_VISION,
	INVISIBILITY,
	JUMP,
	FIRE_RESISTANCE,
	SPEED,
	SLOWNESS,
	WATER_BREATHING,
	INSTANT_HEAL,
	INSTANT_DAMAGE,
	POISON,
	REGEN,
	STRENGTH,
	WEAKNESS,
	LUCK,
	TURTLE_MASTER,
	SLOW_FALLING,
}
namespace PotionType {
	function values(): PotionType[]
	function valueOf(arg0: String): PotionType
	function isInstant(): boolean
	function isExtendable(): boolean
	function getMaxLevel(): int
	function getEffectType(): PotionEffectType
	function isUpgradeable(): boolean
	function getByEffect(arg0: PotionEffectType): PotionType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum ExhaustionReason {
	BLOCK_MINED,
	HUNGER_EFFECT,
	DAMAGED,
	ATTACK,
	JUMP_SPRINT,
	JUMP,
	SWIM,
	WALK_UNDERWATER,
	WALK_ON_WATER,
	SPRINT,
	CROUCH,
	WALK,
	REGEN,
	UNKNOWN,
}
namespace ExhaustionReason {
	function values(): ExhaustionReason[]
	function valueOf(arg0: String): ExhaustionReason
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum PermissionDefault {
	TRUE,
	FALSE,
	OP,
	NOT_OP,
}
namespace PermissionDefault {
	function toString(): String
	function values(): PermissionDefault[]
	function valueOf(arg0: String): PermissionDefault
	function getValue(arg0: boolean): boolean
	function getByName(arg0: String): PermissionDefault
	function name(): String
	function equals(arg0: Object): boolean
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum GrassSpecies {
	DEAD,
	NORMAL,
	FERN_LIKE,
}
namespace GrassSpecies {
	function values(): GrassSpecies[]
	function valueOf(arg0: String): GrassSpecies
	function getByData(arg0: byte): GrassSpecies
	function getData(): byte
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Sound {
	AMBIENT_BASALT_DELTAS_ADDITIONS,
	AMBIENT_BASALT_DELTAS_LOOP,
	AMBIENT_BASALT_DELTAS_MOOD,
	AMBIENT_CAVE,
	AMBIENT_CRIMSON_FOREST_ADDITIONS,
	AMBIENT_CRIMSON_FOREST_LOOP,
	AMBIENT_CRIMSON_FOREST_MOOD,
	AMBIENT_NETHER_WASTES_ADDITIONS,
	AMBIENT_NETHER_WASTES_LOOP,
	AMBIENT_NETHER_WASTES_MOOD,
	AMBIENT_SOUL_SAND_VALLEY_ADDITIONS,
	AMBIENT_SOUL_SAND_VALLEY_LOOP,
	AMBIENT_SOUL_SAND_VALLEY_MOOD,
	AMBIENT_UNDERWATER_ENTER,
	AMBIENT_UNDERWATER_EXIT,
	AMBIENT_UNDERWATER_LOOP,
	AMBIENT_UNDERWATER_LOOP_ADDITIONS,
	AMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE,
	AMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE,
	AMBIENT_WARPED_FOREST_ADDITIONS,
	AMBIENT_WARPED_FOREST_LOOP,
	AMBIENT_WARPED_FOREST_MOOD,
	BLOCK_AMETHYST_BLOCK_BREAK,
	BLOCK_AMETHYST_BLOCK_CHIME,
	BLOCK_AMETHYST_BLOCK_FALL,
	BLOCK_AMETHYST_BLOCK_HIT,
	BLOCK_AMETHYST_BLOCK_PLACE,
	BLOCK_AMETHYST_BLOCK_STEP,
	BLOCK_AMETHYST_CLUSTER_BREAK,
	BLOCK_AMETHYST_CLUSTER_FALL,
	BLOCK_AMETHYST_CLUSTER_HIT,
	BLOCK_AMETHYST_CLUSTER_PLACE,
	BLOCK_AMETHYST_CLUSTER_STEP,
	BLOCK_ANCIENT_DEBRIS_BREAK,
	BLOCK_ANCIENT_DEBRIS_FALL,
	BLOCK_ANCIENT_DEBRIS_HIT,
	BLOCK_ANCIENT_DEBRIS_PLACE,
	BLOCK_ANCIENT_DEBRIS_STEP,
	BLOCK_ANVIL_BREAK,
	BLOCK_ANVIL_DESTROY,
	BLOCK_ANVIL_FALL,
	BLOCK_ANVIL_HIT,
	BLOCK_ANVIL_LAND,
	BLOCK_ANVIL_PLACE,
	BLOCK_ANVIL_STEP,
	BLOCK_ANVIL_USE,
	BLOCK_AZALEA_BREAK,
	BLOCK_AZALEA_FALL,
	BLOCK_AZALEA_HIT,
	BLOCK_AZALEA_LEAVES_BREAK,
	BLOCK_AZALEA_LEAVES_FALL,
	BLOCK_AZALEA_LEAVES_HIT,
	BLOCK_AZALEA_LEAVES_PLACE,
	BLOCK_AZALEA_LEAVES_STEP,
	BLOCK_AZALEA_PLACE,
	BLOCK_AZALEA_STEP,
	BLOCK_BAMBOO_BREAK,
	BLOCK_BAMBOO_FALL,
	BLOCK_BAMBOO_HIT,
	BLOCK_BAMBOO_PLACE,
	BLOCK_BAMBOO_SAPLING_BREAK,
	BLOCK_BAMBOO_SAPLING_HIT,
	BLOCK_BAMBOO_SAPLING_PLACE,
	BLOCK_BAMBOO_STEP,
	BLOCK_BARREL_CLOSE,
	BLOCK_BARREL_OPEN,
	BLOCK_BASALT_BREAK,
	BLOCK_BASALT_FALL,
	BLOCK_BASALT_HIT,
	BLOCK_BASALT_PLACE,
	BLOCK_BASALT_STEP,
	BLOCK_BEACON_ACTIVATE,
	BLOCK_BEACON_AMBIENT,
	BLOCK_BEACON_DEACTIVATE,
	BLOCK_BEACON_POWER_SELECT,
	BLOCK_BEEHIVE_DRIP,
	BLOCK_BEEHIVE_ENTER,
	BLOCK_BEEHIVE_EXIT,
	BLOCK_BEEHIVE_SHEAR,
	BLOCK_BEEHIVE_WORK,
	BLOCK_BELL_RESONATE,
	BLOCK_BELL_USE,
	BLOCK_BIG_DRIPLEAF_BREAK,
	BLOCK_BIG_DRIPLEAF_FALL,
	BLOCK_BIG_DRIPLEAF_HIT,
	BLOCK_BIG_DRIPLEAF_PLACE,
	BLOCK_BIG_DRIPLEAF_STEP,
	BLOCK_BIG_DRIPLEAF_TILT_DOWN,
	BLOCK_BIG_DRIPLEAF_TILT_UP,
	BLOCK_BLASTFURNACE_FIRE_CRACKLE,
	BLOCK_BONE_BLOCK_BREAK,
	BLOCK_BONE_BLOCK_FALL,
	BLOCK_BONE_BLOCK_HIT,
	BLOCK_BONE_BLOCK_PLACE,
	BLOCK_BONE_BLOCK_STEP,
	BLOCK_BREWING_STAND_BREW,
	BLOCK_BUBBLE_COLUMN_BUBBLE_POP,
	BLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT,
	BLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE,
	BLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT,
	BLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE,
	BLOCK_CAKE_ADD_CANDLE,
	BLOCK_CALCITE_BREAK,
	BLOCK_CALCITE_FALL,
	BLOCK_CALCITE_HIT,
	BLOCK_CALCITE_PLACE,
	BLOCK_CALCITE_STEP,
	BLOCK_CAMPFIRE_CRACKLE,
	BLOCK_CANDLE_AMBIENT,
	BLOCK_CANDLE_BREAK,
	BLOCK_CANDLE_EXTINGUISH,
	BLOCK_CANDLE_FALL,
	BLOCK_CANDLE_HIT,
	BLOCK_CANDLE_PLACE,
	BLOCK_CANDLE_STEP,
	BLOCK_CAVE_VINES_BREAK,
	BLOCK_CAVE_VINES_FALL,
	BLOCK_CAVE_VINES_HIT,
	BLOCK_CAVE_VINES_PICK_BERRIES,
	BLOCK_CAVE_VINES_PLACE,
	BLOCK_CAVE_VINES_STEP,
	BLOCK_CHAIN_BREAK,
	BLOCK_CHAIN_FALL,
	BLOCK_CHAIN_HIT,
	BLOCK_CHAIN_PLACE,
	BLOCK_CHAIN_STEP,
	BLOCK_CHEST_CLOSE,
	BLOCK_CHEST_LOCKED,
	BLOCK_CHEST_OPEN,
	BLOCK_CHORUS_FLOWER_DEATH,
	BLOCK_CHORUS_FLOWER_GROW,
	BLOCK_COMPARATOR_CLICK,
	BLOCK_COMPOSTER_EMPTY,
	BLOCK_COMPOSTER_FILL,
	BLOCK_COMPOSTER_FILL_SUCCESS,
	BLOCK_COMPOSTER_READY,
	BLOCK_CONDUIT_ACTIVATE,
	BLOCK_CONDUIT_AMBIENT,
	BLOCK_CONDUIT_AMBIENT_SHORT,
	BLOCK_CONDUIT_ATTACK_TARGET,
	BLOCK_CONDUIT_DEACTIVATE,
	BLOCK_COPPER_BREAK,
	BLOCK_COPPER_FALL,
	BLOCK_COPPER_HIT,
	BLOCK_COPPER_PLACE,
	BLOCK_COPPER_STEP,
	BLOCK_CORAL_BLOCK_BREAK,
	BLOCK_CORAL_BLOCK_FALL,
	BLOCK_CORAL_BLOCK_HIT,
	BLOCK_CORAL_BLOCK_PLACE,
	BLOCK_CORAL_BLOCK_STEP,
	BLOCK_CROP_BREAK,
	BLOCK_DEEPSLATE_BREAK,
	BLOCK_DEEPSLATE_BRICKS_BREAK,
	BLOCK_DEEPSLATE_BRICKS_FALL,
	BLOCK_DEEPSLATE_BRICKS_HIT,
	BLOCK_DEEPSLATE_BRICKS_PLACE,
	BLOCK_DEEPSLATE_BRICKS_STEP,
	BLOCK_DEEPSLATE_FALL,
	BLOCK_DEEPSLATE_HIT,
	BLOCK_DEEPSLATE_PLACE,
	BLOCK_DEEPSLATE_STEP,
	BLOCK_DEEPSLATE_TILES_BREAK,
	BLOCK_DEEPSLATE_TILES_FALL,
	BLOCK_DEEPSLATE_TILES_HIT,
	BLOCK_DEEPSLATE_TILES_PLACE,
	BLOCK_DEEPSLATE_TILES_STEP,
	BLOCK_DISPENSER_DISPENSE,
	BLOCK_DISPENSER_FAIL,
	BLOCK_DISPENSER_LAUNCH,
	BLOCK_DRIPSTONE_BLOCK_BREAK,
	BLOCK_DRIPSTONE_BLOCK_FALL,
	BLOCK_DRIPSTONE_BLOCK_HIT,
	BLOCK_DRIPSTONE_BLOCK_PLACE,
	BLOCK_DRIPSTONE_BLOCK_STEP,
	BLOCK_ENCHANTMENT_TABLE_USE,
	BLOCK_ENDER_CHEST_CLOSE,
	BLOCK_ENDER_CHEST_OPEN,
	BLOCK_END_GATEWAY_SPAWN,
	BLOCK_END_PORTAL_FRAME_FILL,
	BLOCK_END_PORTAL_SPAWN,
	BLOCK_FENCE_GATE_CLOSE,
	BLOCK_FENCE_GATE_OPEN,
	BLOCK_FIRE_AMBIENT,
	BLOCK_FIRE_EXTINGUISH,
	BLOCK_FLOWERING_AZALEA_BREAK,
	BLOCK_FLOWERING_AZALEA_FALL,
	BLOCK_FLOWERING_AZALEA_HIT,
	BLOCK_FLOWERING_AZALEA_PLACE,
	BLOCK_FLOWERING_AZALEA_STEP,
	BLOCK_FROGLIGHT_BREAK,
	BLOCK_FROGLIGHT_FALL,
	BLOCK_FROGLIGHT_HIT,
	BLOCK_FROGLIGHT_PLACE,
	BLOCK_FROGLIGHT_STEP,
	BLOCK_FROGSPAWN_BREAK,
	BLOCK_FROGSPAWN_FALL,
	BLOCK_FROGSPAWN_HATCH,
	BLOCK_FROGSPAWN_HIT,
	BLOCK_FROGSPAWN_PLACE,
	BLOCK_FROGSPAWN_STEP,
	BLOCK_FUNGUS_BREAK,
	BLOCK_FUNGUS_FALL,
	BLOCK_FUNGUS_HIT,
	BLOCK_FUNGUS_PLACE,
	BLOCK_FUNGUS_STEP,
	BLOCK_FURNACE_FIRE_CRACKLE,
	BLOCK_GILDED_BLACKSTONE_BREAK,
	BLOCK_GILDED_BLACKSTONE_FALL,
	BLOCK_GILDED_BLACKSTONE_HIT,
	BLOCK_GILDED_BLACKSTONE_PLACE,
	BLOCK_GILDED_BLACKSTONE_STEP,
	BLOCK_GLASS_BREAK,
	BLOCK_GLASS_FALL,
	BLOCK_GLASS_HIT,
	BLOCK_GLASS_PLACE,
	BLOCK_GLASS_STEP,
	BLOCK_GRASS_BREAK,
	BLOCK_GRASS_FALL,
	BLOCK_GRASS_HIT,
	BLOCK_GRASS_PLACE,
	BLOCK_GRASS_STEP,
	BLOCK_GRAVEL_BREAK,
	BLOCK_GRAVEL_FALL,
	BLOCK_GRAVEL_HIT,
	BLOCK_GRAVEL_PLACE,
	BLOCK_GRAVEL_STEP,
	BLOCK_GRINDSTONE_USE,
	BLOCK_GROWING_PLANT_CROP,
	BLOCK_HANGING_ROOTS_BREAK,
	BLOCK_HANGING_ROOTS_FALL,
	BLOCK_HANGING_ROOTS_HIT,
	BLOCK_HANGING_ROOTS_PLACE,
	BLOCK_HANGING_ROOTS_STEP,
	BLOCK_HONEY_BLOCK_BREAK,
	BLOCK_HONEY_BLOCK_FALL,
	BLOCK_HONEY_BLOCK_HIT,
	BLOCK_HONEY_BLOCK_PLACE,
	BLOCK_HONEY_BLOCK_SLIDE,
	BLOCK_HONEY_BLOCK_STEP,
	BLOCK_IRON_DOOR_CLOSE,
	BLOCK_IRON_DOOR_OPEN,
	BLOCK_IRON_TRAPDOOR_CLOSE,
	BLOCK_IRON_TRAPDOOR_OPEN,
	BLOCK_LADDER_BREAK,
	BLOCK_LADDER_FALL,
	BLOCK_LADDER_HIT,
	BLOCK_LADDER_PLACE,
	BLOCK_LADDER_STEP,
	BLOCK_LANTERN_BREAK,
	BLOCK_LANTERN_FALL,
	BLOCK_LANTERN_HIT,
	BLOCK_LANTERN_PLACE,
	BLOCK_LANTERN_STEP,
	BLOCK_LARGE_AMETHYST_BUD_BREAK,
	BLOCK_LARGE_AMETHYST_BUD_PLACE,
	BLOCK_LAVA_AMBIENT,
	BLOCK_LAVA_EXTINGUISH,
	BLOCK_LAVA_POP,
	BLOCK_LEVER_CLICK,
	BLOCK_LILY_PAD_PLACE,
	BLOCK_LODESTONE_BREAK,
	BLOCK_LODESTONE_FALL,
	BLOCK_LODESTONE_HIT,
	BLOCK_LODESTONE_PLACE,
	BLOCK_LODESTONE_STEP,
	BLOCK_MANGROVE_ROOTS_BREAK,
	BLOCK_MANGROVE_ROOTS_FALL,
	BLOCK_MANGROVE_ROOTS_HIT,
	BLOCK_MANGROVE_ROOTS_PLACE,
	BLOCK_MANGROVE_ROOTS_STEP,
	BLOCK_MEDIUM_AMETHYST_BUD_BREAK,
	BLOCK_MEDIUM_AMETHYST_BUD_PLACE,
	BLOCK_METAL_BREAK,
	BLOCK_METAL_FALL,
	BLOCK_METAL_HIT,
	BLOCK_METAL_PLACE,
	BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF,
	BLOCK_METAL_PRESSURE_PLATE_CLICK_ON,
	BLOCK_METAL_STEP,
	BLOCK_MOSS_BREAK,
	BLOCK_MOSS_CARPET_BREAK,
	BLOCK_MOSS_CARPET_FALL,
	BLOCK_MOSS_CARPET_HIT,
	BLOCK_MOSS_CARPET_PLACE,
	BLOCK_MOSS_CARPET_STEP,
	BLOCK_MOSS_FALL,
	BLOCK_MOSS_HIT,
	BLOCK_MOSS_PLACE,
	BLOCK_MOSS_STEP,
	BLOCK_MUDDY_MANGROVE_ROOTS_BREAK,
	BLOCK_MUDDY_MANGROVE_ROOTS_FALL,
	BLOCK_MUDDY_MANGROVE_ROOTS_HIT,
	BLOCK_MUDDY_MANGROVE_ROOTS_PLACE,
	BLOCK_MUDDY_MANGROVE_ROOTS_STEP,
	BLOCK_MUD_BREAK,
	BLOCK_MUD_BRICKS_BREAK,
	BLOCK_MUD_BRICKS_FALL,
	BLOCK_MUD_BRICKS_HIT,
	BLOCK_MUD_BRICKS_PLACE,
	BLOCK_MUD_BRICKS_STEP,
	BLOCK_MUD_FALL,
	BLOCK_MUD_HIT,
	BLOCK_MUD_PLACE,
	BLOCK_MUD_STEP,
	BLOCK_NETHERITE_BLOCK_BREAK,
	BLOCK_NETHERITE_BLOCK_FALL,
	BLOCK_NETHERITE_BLOCK_HIT,
	BLOCK_NETHERITE_BLOCK_PLACE,
	BLOCK_NETHERITE_BLOCK_STEP,
	BLOCK_NETHERRACK_BREAK,
	BLOCK_NETHERRACK_FALL,
	BLOCK_NETHERRACK_HIT,
	BLOCK_NETHERRACK_PLACE,
	BLOCK_NETHERRACK_STEP,
	BLOCK_NETHER_BRICKS_BREAK,
	BLOCK_NETHER_BRICKS_FALL,
	BLOCK_NETHER_BRICKS_HIT,
	BLOCK_NETHER_BRICKS_PLACE,
	BLOCK_NETHER_BRICKS_STEP,
	BLOCK_NETHER_GOLD_ORE_BREAK,
	BLOCK_NETHER_GOLD_ORE_FALL,
	BLOCK_NETHER_GOLD_ORE_HIT,
	BLOCK_NETHER_GOLD_ORE_PLACE,
	BLOCK_NETHER_GOLD_ORE_STEP,
	BLOCK_NETHER_ORE_BREAK,
	BLOCK_NETHER_ORE_FALL,
	BLOCK_NETHER_ORE_HIT,
	BLOCK_NETHER_ORE_PLACE,
	BLOCK_NETHER_ORE_STEP,
	BLOCK_NETHER_SPROUTS_BREAK,
	BLOCK_NETHER_SPROUTS_FALL,
	BLOCK_NETHER_SPROUTS_HIT,
	BLOCK_NETHER_SPROUTS_PLACE,
	BLOCK_NETHER_SPROUTS_STEP,
	BLOCK_NETHER_WART_BREAK,
	BLOCK_NOTE_BLOCK_BANJO,
	BLOCK_NOTE_BLOCK_BASEDRUM,
	BLOCK_NOTE_BLOCK_BASS,
	BLOCK_NOTE_BLOCK_BELL,
	BLOCK_NOTE_BLOCK_BIT,
	BLOCK_NOTE_BLOCK_CHIME,
	BLOCK_NOTE_BLOCK_COW_BELL,
	BLOCK_NOTE_BLOCK_DIDGERIDOO,
	BLOCK_NOTE_BLOCK_FLUTE,
	BLOCK_NOTE_BLOCK_GUITAR,
	BLOCK_NOTE_BLOCK_HARP,
	BLOCK_NOTE_BLOCK_HAT,
	BLOCK_NOTE_BLOCK_IRON_XYLOPHONE,
	BLOCK_NOTE_BLOCK_PLING,
	BLOCK_NOTE_BLOCK_SNARE,
	BLOCK_NOTE_BLOCK_XYLOPHONE,
	BLOCK_NYLIUM_BREAK,
	BLOCK_NYLIUM_FALL,
	BLOCK_NYLIUM_HIT,
	BLOCK_NYLIUM_PLACE,
	BLOCK_NYLIUM_STEP,
	BLOCK_PACKED_MUD_BREAK,
	BLOCK_PACKED_MUD_FALL,
	BLOCK_PACKED_MUD_HIT,
	BLOCK_PACKED_MUD_PLACE,
	BLOCK_PACKED_MUD_STEP,
	BLOCK_PISTON_CONTRACT,
	BLOCK_PISTON_EXTEND,
	BLOCK_POINTED_DRIPSTONE_BREAK,
	BLOCK_POINTED_DRIPSTONE_DRIP_LAVA,
	BLOCK_POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON,
	BLOCK_POINTED_DRIPSTONE_DRIP_WATER,
	BLOCK_POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON,
	BLOCK_POINTED_DRIPSTONE_FALL,
	BLOCK_POINTED_DRIPSTONE_HIT,
	BLOCK_POINTED_DRIPSTONE_LAND,
	BLOCK_POINTED_DRIPSTONE_PLACE,
	BLOCK_POINTED_DRIPSTONE_STEP,
	BLOCK_POLISHED_DEEPSLATE_BREAK,
	BLOCK_POLISHED_DEEPSLATE_FALL,
	BLOCK_POLISHED_DEEPSLATE_HIT,
	BLOCK_POLISHED_DEEPSLATE_PLACE,
	BLOCK_POLISHED_DEEPSLATE_STEP,
	BLOCK_PORTAL_AMBIENT,
	BLOCK_PORTAL_TRAVEL,
	BLOCK_PORTAL_TRIGGER,
	BLOCK_POWDER_SNOW_BREAK,
	BLOCK_POWDER_SNOW_FALL,
	BLOCK_POWDER_SNOW_HIT,
	BLOCK_POWDER_SNOW_PLACE,
	BLOCK_POWDER_SNOW_STEP,
	BLOCK_PUMPKIN_CARVE,
	BLOCK_REDSTONE_TORCH_BURNOUT,
	BLOCK_RESPAWN_ANCHOR_AMBIENT,
	BLOCK_RESPAWN_ANCHOR_CHARGE,
	BLOCK_RESPAWN_ANCHOR_DEPLETE,
	BLOCK_RESPAWN_ANCHOR_SET_SPAWN,
	BLOCK_ROOTED_DIRT_BREAK,
	BLOCK_ROOTED_DIRT_FALL,
	BLOCK_ROOTED_DIRT_HIT,
	BLOCK_ROOTED_DIRT_PLACE,
	BLOCK_ROOTED_DIRT_STEP,
	BLOCK_ROOTS_BREAK,
	BLOCK_ROOTS_FALL,
	BLOCK_ROOTS_HIT,
	BLOCK_ROOTS_PLACE,
	BLOCK_ROOTS_STEP,
	BLOCK_SAND_BREAK,
	BLOCK_SAND_FALL,
	BLOCK_SAND_HIT,
	BLOCK_SAND_PLACE,
	BLOCK_SAND_STEP,
	BLOCK_SCAFFOLDING_BREAK,
	BLOCK_SCAFFOLDING_FALL,
	BLOCK_SCAFFOLDING_HIT,
	BLOCK_SCAFFOLDING_PLACE,
	BLOCK_SCAFFOLDING_STEP,
	BLOCK_SCULK_BREAK,
	BLOCK_SCULK_CATALYST_BLOOM,
	BLOCK_SCULK_CATALYST_BREAK,
	BLOCK_SCULK_CATALYST_FALL,
	BLOCK_SCULK_CATALYST_HIT,
	BLOCK_SCULK_CATALYST_PLACE,
	BLOCK_SCULK_CATALYST_STEP,
	BLOCK_SCULK_CHARGE,
	BLOCK_SCULK_FALL,
	BLOCK_SCULK_HIT,
	BLOCK_SCULK_PLACE,
	BLOCK_SCULK_SENSOR_BREAK,
	BLOCK_SCULK_SENSOR_CLICKING,
	BLOCK_SCULK_SENSOR_CLICKING_STOP,
	BLOCK_SCULK_SENSOR_FALL,
	BLOCK_SCULK_SENSOR_HIT,
	BLOCK_SCULK_SENSOR_PLACE,
	BLOCK_SCULK_SENSOR_STEP,
	BLOCK_SCULK_SHRIEKER_BREAK,
	BLOCK_SCULK_SHRIEKER_FALL,
	BLOCK_SCULK_SHRIEKER_HIT,
	BLOCK_SCULK_SHRIEKER_PLACE,
	BLOCK_SCULK_SHRIEKER_SHRIEK,
	BLOCK_SCULK_SHRIEKER_STEP,
	BLOCK_SCULK_SPREAD,
	BLOCK_SCULK_STEP,
	BLOCK_SCULK_VEIN_BREAK,
	BLOCK_SCULK_VEIN_FALL,
	BLOCK_SCULK_VEIN_HIT,
	BLOCK_SCULK_VEIN_PLACE,
	BLOCK_SCULK_VEIN_STEP,
	BLOCK_SHROOMLIGHT_BREAK,
	BLOCK_SHROOMLIGHT_FALL,
	BLOCK_SHROOMLIGHT_HIT,
	BLOCK_SHROOMLIGHT_PLACE,
	BLOCK_SHROOMLIGHT_STEP,
	BLOCK_SHULKER_BOX_CLOSE,
	BLOCK_SHULKER_BOX_OPEN,
	BLOCK_SLIME_BLOCK_BREAK,
	BLOCK_SLIME_BLOCK_FALL,
	BLOCK_SLIME_BLOCK_HIT,
	BLOCK_SLIME_BLOCK_PLACE,
	BLOCK_SLIME_BLOCK_STEP,
	BLOCK_SMALL_AMETHYST_BUD_BREAK,
	BLOCK_SMALL_AMETHYST_BUD_PLACE,
	BLOCK_SMALL_DRIPLEAF_BREAK,
	BLOCK_SMALL_DRIPLEAF_FALL,
	BLOCK_SMALL_DRIPLEAF_HIT,
	BLOCK_SMALL_DRIPLEAF_PLACE,
	BLOCK_SMALL_DRIPLEAF_STEP,
	BLOCK_SMITHING_TABLE_USE,
	BLOCK_SMOKER_SMOKE,
	BLOCK_SNOW_BREAK,
	BLOCK_SNOW_FALL,
	BLOCK_SNOW_HIT,
	BLOCK_SNOW_PLACE,
	BLOCK_SNOW_STEP,
	BLOCK_SOUL_SAND_BREAK,
	BLOCK_SOUL_SAND_FALL,
	BLOCK_SOUL_SAND_HIT,
	BLOCK_SOUL_SAND_PLACE,
	BLOCK_SOUL_SAND_STEP,
	BLOCK_SOUL_SOIL_BREAK,
	BLOCK_SOUL_SOIL_FALL,
	BLOCK_SOUL_SOIL_HIT,
	BLOCK_SOUL_SOIL_PLACE,
	BLOCK_SOUL_SOIL_STEP,
	BLOCK_SPORE_BLOSSOM_BREAK,
	BLOCK_SPORE_BLOSSOM_FALL,
	BLOCK_SPORE_BLOSSOM_HIT,
	BLOCK_SPORE_BLOSSOM_PLACE,
	BLOCK_SPORE_BLOSSOM_STEP,
	BLOCK_STEM_BREAK,
	BLOCK_STEM_FALL,
	BLOCK_STEM_HIT,
	BLOCK_STEM_PLACE,
	BLOCK_STEM_STEP,
	BLOCK_STONE_BREAK,
	BLOCK_STONE_BUTTON_CLICK_OFF,
	BLOCK_STONE_BUTTON_CLICK_ON,
	BLOCK_STONE_FALL,
	BLOCK_STONE_HIT,
	BLOCK_STONE_PLACE,
	BLOCK_STONE_PRESSURE_PLATE_CLICK_OFF,
	BLOCK_STONE_PRESSURE_PLATE_CLICK_ON,
	BLOCK_STONE_STEP,
	BLOCK_SWEET_BERRY_BUSH_BREAK,
	BLOCK_SWEET_BERRY_BUSH_PICK_BERRIES,
	BLOCK_SWEET_BERRY_BUSH_PLACE,
	BLOCK_TRIPWIRE_ATTACH,
	BLOCK_TRIPWIRE_CLICK_OFF,
	BLOCK_TRIPWIRE_CLICK_ON,
	BLOCK_TRIPWIRE_DETACH,
	BLOCK_TUFF_BREAK,
	BLOCK_TUFF_FALL,
	BLOCK_TUFF_HIT,
	BLOCK_TUFF_PLACE,
	BLOCK_TUFF_STEP,
	BLOCK_VINE_BREAK,
	BLOCK_VINE_FALL,
	BLOCK_VINE_HIT,
	BLOCK_VINE_PLACE,
	BLOCK_VINE_STEP,
	BLOCK_WART_BLOCK_BREAK,
	BLOCK_WART_BLOCK_FALL,
	BLOCK_WART_BLOCK_HIT,
	BLOCK_WART_BLOCK_PLACE,
	BLOCK_WART_BLOCK_STEP,
	BLOCK_WATER_AMBIENT,
	BLOCK_WEEPING_VINES_BREAK,
	BLOCK_WEEPING_VINES_FALL,
	BLOCK_WEEPING_VINES_HIT,
	BLOCK_WEEPING_VINES_PLACE,
	BLOCK_WEEPING_VINES_STEP,
	BLOCK_WET_GRASS_BREAK,
	BLOCK_WET_GRASS_FALL,
	BLOCK_WET_GRASS_HIT,
	BLOCK_WET_GRASS_PLACE,
	BLOCK_WET_GRASS_STEP,
	BLOCK_WOODEN_BUTTON_CLICK_OFF,
	BLOCK_WOODEN_BUTTON_CLICK_ON,
	BLOCK_WOODEN_DOOR_CLOSE,
	BLOCK_WOODEN_DOOR_OPEN,
	BLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF,
	BLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON,
	BLOCK_WOODEN_TRAPDOOR_CLOSE,
	BLOCK_WOODEN_TRAPDOOR_OPEN,
	BLOCK_WOOD_BREAK,
	BLOCK_WOOD_FALL,
	BLOCK_WOOD_HIT,
	BLOCK_WOOD_PLACE,
	BLOCK_WOOD_STEP,
	BLOCK_WOOL_BREAK,
	BLOCK_WOOL_FALL,
	BLOCK_WOOL_HIT,
	BLOCK_WOOL_PLACE,
	BLOCK_WOOL_STEP,
	ENCHANT_THORNS_HIT,
	ENTITY_ALLAY_AMBIENT_WITHOUT_ITEM,
	ENTITY_ALLAY_AMBIENT_WITH_ITEM,
	ENTITY_ALLAY_DEATH,
	ENTITY_ALLAY_HURT,
	ENTITY_ALLAY_ITEM_GIVEN,
	ENTITY_ALLAY_ITEM_TAKEN,
	ENTITY_ALLAY_ITEM_THROWN,
	ENTITY_ARMOR_STAND_BREAK,
	ENTITY_ARMOR_STAND_FALL,
	ENTITY_ARMOR_STAND_HIT,
	ENTITY_ARMOR_STAND_PLACE,
	ENTITY_ARROW_HIT,
	ENTITY_ARROW_HIT_PLAYER,
	ENTITY_ARROW_SHOOT,
	ENTITY_AXOLOTL_ATTACK,
	ENTITY_AXOLOTL_DEATH,
	ENTITY_AXOLOTL_HURT,
	ENTITY_AXOLOTL_IDLE_AIR,
	ENTITY_AXOLOTL_IDLE_WATER,
	ENTITY_AXOLOTL_SPLASH,
	ENTITY_AXOLOTL_SWIM,
	ENTITY_BAT_AMBIENT,
	ENTITY_BAT_DEATH,
	ENTITY_BAT_HURT,
	ENTITY_BAT_LOOP,
	ENTITY_BAT_TAKEOFF,
	ENTITY_BEE_DEATH,
	ENTITY_BEE_HURT,
	ENTITY_BEE_LOOP,
	ENTITY_BEE_LOOP_AGGRESSIVE,
	ENTITY_BEE_POLLINATE,
	ENTITY_BEE_STING,
	ENTITY_BLAZE_AMBIENT,
	ENTITY_BLAZE_BURN,
	ENTITY_BLAZE_DEATH,
	ENTITY_BLAZE_HURT,
	ENTITY_BLAZE_SHOOT,
	ENTITY_BOAT_PADDLE_LAND,
	ENTITY_BOAT_PADDLE_WATER,
	ENTITY_CAT_AMBIENT,
	ENTITY_CAT_BEG_FOR_FOOD,
	ENTITY_CAT_DEATH,
	ENTITY_CAT_EAT,
	ENTITY_CAT_HISS,
	ENTITY_CAT_HURT,
	ENTITY_CAT_PURR,
	ENTITY_CAT_PURREOW,
	ENTITY_CAT_STRAY_AMBIENT,
	ENTITY_CHICKEN_AMBIENT,
	ENTITY_CHICKEN_DEATH,
	ENTITY_CHICKEN_EGG,
	ENTITY_CHICKEN_HURT,
	ENTITY_CHICKEN_STEP,
	ENTITY_COD_AMBIENT,
	ENTITY_COD_DEATH,
	ENTITY_COD_FLOP,
	ENTITY_COD_HURT,
	ENTITY_COW_AMBIENT,
	ENTITY_COW_DEATH,
	ENTITY_COW_HURT,
	ENTITY_COW_MILK,
	ENTITY_COW_STEP,
	ENTITY_CREEPER_DEATH,
	ENTITY_CREEPER_HURT,
	ENTITY_CREEPER_PRIMED,
	ENTITY_DOLPHIN_AMBIENT,
	ENTITY_DOLPHIN_AMBIENT_WATER,
	ENTITY_DOLPHIN_ATTACK,
	ENTITY_DOLPHIN_DEATH,
	ENTITY_DOLPHIN_EAT,
	ENTITY_DOLPHIN_HURT,
	ENTITY_DOLPHIN_JUMP,
	ENTITY_DOLPHIN_PLAY,
	ENTITY_DOLPHIN_SPLASH,
	ENTITY_DOLPHIN_SWIM,
	ENTITY_DONKEY_AMBIENT,
	ENTITY_DONKEY_ANGRY,
	ENTITY_DONKEY_CHEST,
	ENTITY_DONKEY_DEATH,
	ENTITY_DONKEY_EAT,
	ENTITY_DONKEY_HURT,
	ENTITY_DRAGON_FIREBALL_EXPLODE,
	ENTITY_DROWNED_AMBIENT,
	ENTITY_DROWNED_AMBIENT_WATER,
	ENTITY_DROWNED_DEATH,
	ENTITY_DROWNED_DEATH_WATER,
	ENTITY_DROWNED_HURT,
	ENTITY_DROWNED_HURT_WATER,
	ENTITY_DROWNED_SHOOT,
	ENTITY_DROWNED_STEP,
	ENTITY_DROWNED_SWIM,
	ENTITY_EGG_THROW,
	ENTITY_ELDER_GUARDIAN_AMBIENT,
	ENTITY_ELDER_GUARDIAN_AMBIENT_LAND,
	ENTITY_ELDER_GUARDIAN_CURSE,
	ENTITY_ELDER_GUARDIAN_DEATH,
	ENTITY_ELDER_GUARDIAN_DEATH_LAND,
	ENTITY_ELDER_GUARDIAN_FLOP,
	ENTITY_ELDER_GUARDIAN_HURT,
	ENTITY_ELDER_GUARDIAN_HURT_LAND,
	ENTITY_ENDERMAN_AMBIENT,
	ENTITY_ENDERMAN_DEATH,
	ENTITY_ENDERMAN_HURT,
	ENTITY_ENDERMAN_SCREAM,
	ENTITY_ENDERMAN_STARE,
	ENTITY_ENDERMAN_TELEPORT,
	ENTITY_ENDERMITE_AMBIENT,
	ENTITY_ENDERMITE_DEATH,
	ENTITY_ENDERMITE_HURT,
	ENTITY_ENDERMITE_STEP,
	ENTITY_ENDER_DRAGON_AMBIENT,
	ENTITY_ENDER_DRAGON_DEATH,
	ENTITY_ENDER_DRAGON_FLAP,
	ENTITY_ENDER_DRAGON_GROWL,
	ENTITY_ENDER_DRAGON_HURT,
	ENTITY_ENDER_DRAGON_SHOOT,
	ENTITY_ENDER_EYE_DEATH,
	ENTITY_ENDER_EYE_LAUNCH,
	ENTITY_ENDER_PEARL_THROW,
	ENTITY_EVOKER_AMBIENT,
	ENTITY_EVOKER_CAST_SPELL,
	ENTITY_EVOKER_CELEBRATE,
	ENTITY_EVOKER_DEATH,
	ENTITY_EVOKER_FANGS_ATTACK,
	ENTITY_EVOKER_HURT,
	ENTITY_EVOKER_PREPARE_ATTACK,
	ENTITY_EVOKER_PREPARE_SUMMON,
	ENTITY_EVOKER_PREPARE_WOLOLO,
	ENTITY_EXPERIENCE_BOTTLE_THROW,
	ENTITY_EXPERIENCE_ORB_PICKUP,
	ENTITY_FIREWORK_ROCKET_BLAST,
	ENTITY_FIREWORK_ROCKET_BLAST_FAR,
	ENTITY_FIREWORK_ROCKET_LARGE_BLAST,
	ENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR,
	ENTITY_FIREWORK_ROCKET_LAUNCH,
	ENTITY_FIREWORK_ROCKET_SHOOT,
	ENTITY_FIREWORK_ROCKET_TWINKLE,
	ENTITY_FIREWORK_ROCKET_TWINKLE_FAR,
	ENTITY_FISHING_BOBBER_RETRIEVE,
	ENTITY_FISHING_BOBBER_SPLASH,
	ENTITY_FISHING_BOBBER_THROW,
	ENTITY_FISH_SWIM,
	ENTITY_FOX_AGGRO,
	ENTITY_FOX_AMBIENT,
	ENTITY_FOX_BITE,
	ENTITY_FOX_DEATH,
	ENTITY_FOX_EAT,
	ENTITY_FOX_HURT,
	ENTITY_FOX_SCREECH,
	ENTITY_FOX_SLEEP,
	ENTITY_FOX_SNIFF,
	ENTITY_FOX_SPIT,
	ENTITY_FOX_TELEPORT,
	ENTITY_FROG_AMBIENT,
	ENTITY_FROG_DEATH,
	ENTITY_FROG_EAT,
	ENTITY_FROG_HURT,
	ENTITY_FROG_LAY_SPAWN,
	ENTITY_FROG_LONG_JUMP,
	ENTITY_FROG_STEP,
	ENTITY_FROG_TONGUE,
	ENTITY_GENERIC_BIG_FALL,
	ENTITY_GENERIC_BURN,
	ENTITY_GENERIC_DEATH,
	ENTITY_GENERIC_DRINK,
	ENTITY_GENERIC_EAT,
	ENTITY_GENERIC_EXPLODE,
	ENTITY_GENERIC_EXTINGUISH_FIRE,
	ENTITY_GENERIC_HURT,
	ENTITY_GENERIC_SMALL_FALL,
	ENTITY_GENERIC_SPLASH,
	ENTITY_GENERIC_SWIM,
	ENTITY_GHAST_AMBIENT,
	ENTITY_GHAST_DEATH,
	ENTITY_GHAST_HURT,
	ENTITY_GHAST_SCREAM,
	ENTITY_GHAST_SHOOT,
	ENTITY_GHAST_WARN,
	ENTITY_GLOW_ITEM_FRAME_ADD_ITEM,
	ENTITY_GLOW_ITEM_FRAME_BREAK,
	ENTITY_GLOW_ITEM_FRAME_PLACE,
	ENTITY_GLOW_ITEM_FRAME_REMOVE_ITEM,
	ENTITY_GLOW_ITEM_FRAME_ROTATE_ITEM,
	ENTITY_GLOW_SQUID_AMBIENT,
	ENTITY_GLOW_SQUID_DEATH,
	ENTITY_GLOW_SQUID_HURT,
	ENTITY_GLOW_SQUID_SQUIRT,
	ENTITY_GOAT_AMBIENT,
	ENTITY_GOAT_DEATH,
	ENTITY_GOAT_EAT,
	ENTITY_GOAT_HORN_BREAK,
	ENTITY_GOAT_HURT,
	ENTITY_GOAT_LONG_JUMP,
	ENTITY_GOAT_MILK,
	ENTITY_GOAT_PREPARE_RAM,
	ENTITY_GOAT_RAM_IMPACT,
	ENTITY_GOAT_SCREAMING_AMBIENT,
	ENTITY_GOAT_SCREAMING_DEATH,
	ENTITY_GOAT_SCREAMING_EAT,
	ENTITY_GOAT_SCREAMING_HORN_BREAK,
	ENTITY_GOAT_SCREAMING_HURT,
	ENTITY_GOAT_SCREAMING_LONG_JUMP,
	ENTITY_GOAT_SCREAMING_MILK,
	ENTITY_GOAT_SCREAMING_PREPARE_RAM,
	ENTITY_GOAT_SCREAMING_RAM_IMPACT,
	ENTITY_GOAT_STEP,
	ENTITY_GUARDIAN_AMBIENT,
	ENTITY_GUARDIAN_AMBIENT_LAND,
	ENTITY_GUARDIAN_ATTACK,
	ENTITY_GUARDIAN_DEATH,
	ENTITY_GUARDIAN_DEATH_LAND,
	ENTITY_GUARDIAN_FLOP,
	ENTITY_GUARDIAN_HURT,
	ENTITY_GUARDIAN_HURT_LAND,
	ENTITY_HOGLIN_AMBIENT,
	ENTITY_HOGLIN_ANGRY,
	ENTITY_HOGLIN_ATTACK,
	ENTITY_HOGLIN_CONVERTED_TO_ZOMBIFIED,
	ENTITY_HOGLIN_DEATH,
	ENTITY_HOGLIN_HURT,
	ENTITY_HOGLIN_RETREAT,
	ENTITY_HOGLIN_STEP,
	ENTITY_HORSE_AMBIENT,
	ENTITY_HORSE_ANGRY,
	ENTITY_HORSE_ARMOR,
	ENTITY_HORSE_BREATHE,
	ENTITY_HORSE_DEATH,
	ENTITY_HORSE_EAT,
	ENTITY_HORSE_GALLOP,
	ENTITY_HORSE_HURT,
	ENTITY_HORSE_JUMP,
	ENTITY_HORSE_LAND,
	ENTITY_HORSE_SADDLE,
	ENTITY_HORSE_STEP,
	ENTITY_HORSE_STEP_WOOD,
	ENTITY_HOSTILE_BIG_FALL,
	ENTITY_HOSTILE_DEATH,
	ENTITY_HOSTILE_HURT,
	ENTITY_HOSTILE_SMALL_FALL,
	ENTITY_HOSTILE_SPLASH,
	ENTITY_HOSTILE_SWIM,
	ENTITY_HUSK_AMBIENT,
	ENTITY_HUSK_CONVERTED_TO_ZOMBIE,
	ENTITY_HUSK_DEATH,
	ENTITY_HUSK_HURT,
	ENTITY_HUSK_STEP,
	ENTITY_ILLUSIONER_AMBIENT,
	ENTITY_ILLUSIONER_CAST_SPELL,
	ENTITY_ILLUSIONER_DEATH,
	ENTITY_ILLUSIONER_HURT,
	ENTITY_ILLUSIONER_MIRROR_MOVE,
	ENTITY_ILLUSIONER_PREPARE_BLINDNESS,
	ENTITY_ILLUSIONER_PREPARE_MIRROR,
	ENTITY_IRON_GOLEM_ATTACK,
	ENTITY_IRON_GOLEM_DAMAGE,
	ENTITY_IRON_GOLEM_DEATH,
	ENTITY_IRON_GOLEM_HURT,
	ENTITY_IRON_GOLEM_REPAIR,
	ENTITY_IRON_GOLEM_STEP,
	ENTITY_ITEM_BREAK,
	ENTITY_ITEM_FRAME_ADD_ITEM,
	ENTITY_ITEM_FRAME_BREAK,
	ENTITY_ITEM_FRAME_PLACE,
	ENTITY_ITEM_FRAME_REMOVE_ITEM,
	ENTITY_ITEM_FRAME_ROTATE_ITEM,
	ENTITY_ITEM_PICKUP,
	ENTITY_LEASH_KNOT_BREAK,
	ENTITY_LEASH_KNOT_PLACE,
	ENTITY_LIGHTNING_BOLT_IMPACT,
	ENTITY_LIGHTNING_BOLT_THUNDER,
	ENTITY_LINGERING_POTION_THROW,
	ENTITY_LLAMA_AMBIENT,
	ENTITY_LLAMA_ANGRY,
	ENTITY_LLAMA_CHEST,
	ENTITY_LLAMA_DEATH,
	ENTITY_LLAMA_EAT,
	ENTITY_LLAMA_HURT,
	ENTITY_LLAMA_SPIT,
	ENTITY_LLAMA_STEP,
	ENTITY_LLAMA_SWAG,
	ENTITY_MAGMA_CUBE_DEATH,
	ENTITY_MAGMA_CUBE_DEATH_SMALL,
	ENTITY_MAGMA_CUBE_HURT,
	ENTITY_MAGMA_CUBE_HURT_SMALL,
	ENTITY_MAGMA_CUBE_JUMP,
	ENTITY_MAGMA_CUBE_SQUISH,
	ENTITY_MAGMA_CUBE_SQUISH_SMALL,
	ENTITY_MINECART_INSIDE,
	ENTITY_MINECART_INSIDE_UNDERWATER,
	ENTITY_MINECART_RIDING,
	ENTITY_MOOSHROOM_CONVERT,
	ENTITY_MOOSHROOM_EAT,
	ENTITY_MOOSHROOM_MILK,
	ENTITY_MOOSHROOM_SHEAR,
	ENTITY_MOOSHROOM_SUSPICIOUS_MILK,
	ENTITY_MULE_AMBIENT,
	ENTITY_MULE_ANGRY,
	ENTITY_MULE_CHEST,
	ENTITY_MULE_DEATH,
	ENTITY_MULE_EAT,
	ENTITY_MULE_HURT,
	ENTITY_OCELOT_AMBIENT,
	ENTITY_OCELOT_DEATH,
	ENTITY_OCELOT_HURT,
	ENTITY_PAINTING_BREAK,
	ENTITY_PAINTING_PLACE,
	ENTITY_PANDA_AGGRESSIVE_AMBIENT,
	ENTITY_PANDA_AMBIENT,
	ENTITY_PANDA_BITE,
	ENTITY_PANDA_CANT_BREED,
	ENTITY_PANDA_DEATH,
	ENTITY_PANDA_EAT,
	ENTITY_PANDA_HURT,
	ENTITY_PANDA_PRE_SNEEZE,
	ENTITY_PANDA_SNEEZE,
	ENTITY_PANDA_STEP,
	ENTITY_PANDA_WORRIED_AMBIENT,
	ENTITY_PARROT_AMBIENT,
	ENTITY_PARROT_DEATH,
	ENTITY_PARROT_EAT,
	ENTITY_PARROT_FLY,
	ENTITY_PARROT_HURT,
	ENTITY_PARROT_IMITATE_BLAZE,
	ENTITY_PARROT_IMITATE_CREEPER,
	ENTITY_PARROT_IMITATE_DROWNED,
	ENTITY_PARROT_IMITATE_ELDER_GUARDIAN,
	ENTITY_PARROT_IMITATE_ENDERMITE,
	ENTITY_PARROT_IMITATE_ENDER_DRAGON,
	ENTITY_PARROT_IMITATE_EVOKER,
	ENTITY_PARROT_IMITATE_GHAST,
	ENTITY_PARROT_IMITATE_GUARDIAN,
	ENTITY_PARROT_IMITATE_HOGLIN,
	ENTITY_PARROT_IMITATE_HUSK,
	ENTITY_PARROT_IMITATE_ILLUSIONER,
	ENTITY_PARROT_IMITATE_MAGMA_CUBE,
	ENTITY_PARROT_IMITATE_PHANTOM,
	ENTITY_PARROT_IMITATE_PIGLIN,
	ENTITY_PARROT_IMITATE_PIGLIN_BRUTE,
	ENTITY_PARROT_IMITATE_PILLAGER,
	ENTITY_PARROT_IMITATE_RAVAGER,
	ENTITY_PARROT_IMITATE_SHULKER,
	ENTITY_PARROT_IMITATE_SILVERFISH,
	ENTITY_PARROT_IMITATE_SKELETON,
	ENTITY_PARROT_IMITATE_SLIME,
	ENTITY_PARROT_IMITATE_SPIDER,
	ENTITY_PARROT_IMITATE_STRAY,
	ENTITY_PARROT_IMITATE_VEX,
	ENTITY_PARROT_IMITATE_VINDICATOR,
	ENTITY_PARROT_IMITATE_WARDEN,
	ENTITY_PARROT_IMITATE_WITCH,
	ENTITY_PARROT_IMITATE_WITHER,
	ENTITY_PARROT_IMITATE_WITHER_SKELETON,
	ENTITY_PARROT_IMITATE_ZOGLIN,
	ENTITY_PARROT_IMITATE_ZOMBIE,
	ENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER,
	ENTITY_PARROT_STEP,
	ENTITY_PHANTOM_AMBIENT,
	ENTITY_PHANTOM_BITE,
	ENTITY_PHANTOM_DEATH,
	ENTITY_PHANTOM_FLAP,
	ENTITY_PHANTOM_HURT,
	ENTITY_PHANTOM_SWOOP,
	ENTITY_PIGLIN_ADMIRING_ITEM,
	ENTITY_PIGLIN_AMBIENT,
	ENTITY_PIGLIN_ANGRY,
	ENTITY_PIGLIN_BRUTE_AMBIENT,
	ENTITY_PIGLIN_BRUTE_ANGRY,
	ENTITY_PIGLIN_BRUTE_CONVERTED_TO_ZOMBIFIED,
	ENTITY_PIGLIN_BRUTE_DEATH,
	ENTITY_PIGLIN_BRUTE_HURT,
	ENTITY_PIGLIN_BRUTE_STEP,
	ENTITY_PIGLIN_CELEBRATE,
	ENTITY_PIGLIN_CONVERTED_TO_ZOMBIFIED,
	ENTITY_PIGLIN_DEATH,
	ENTITY_PIGLIN_HURT,
	ENTITY_PIGLIN_JEALOUS,
	ENTITY_PIGLIN_RETREAT,
	ENTITY_PIGLIN_STEP,
	ENTITY_PIG_AMBIENT,
	ENTITY_PIG_DEATH,
	ENTITY_PIG_HURT,
	ENTITY_PIG_SADDLE,
	ENTITY_PIG_STEP,
	ENTITY_PILLAGER_AMBIENT,
	ENTITY_PILLAGER_CELEBRATE,
	ENTITY_PILLAGER_DEATH,
	ENTITY_PILLAGER_HURT,
	ENTITY_PLAYER_ATTACK_CRIT,
	ENTITY_PLAYER_ATTACK_KNOCKBACK,
	ENTITY_PLAYER_ATTACK_NODAMAGE,
	ENTITY_PLAYER_ATTACK_STRONG,
	ENTITY_PLAYER_ATTACK_SWEEP,
	ENTITY_PLAYER_ATTACK_WEAK,
	ENTITY_PLAYER_BIG_FALL,
	ENTITY_PLAYER_BREATH,
	ENTITY_PLAYER_BURP,
	ENTITY_PLAYER_DEATH,
	ENTITY_PLAYER_HURT,
	ENTITY_PLAYER_HURT_DROWN,
	ENTITY_PLAYER_HURT_FREEZE,
	ENTITY_PLAYER_HURT_ON_FIRE,
	ENTITY_PLAYER_HURT_SWEET_BERRY_BUSH,
	ENTITY_PLAYER_LEVELUP,
	ENTITY_PLAYER_SMALL_FALL,
	ENTITY_PLAYER_SPLASH,
	ENTITY_PLAYER_SPLASH_HIGH_SPEED,
	ENTITY_PLAYER_SWIM,
	ENTITY_POLAR_BEAR_AMBIENT,
	ENTITY_POLAR_BEAR_AMBIENT_BABY,
	ENTITY_POLAR_BEAR_DEATH,
	ENTITY_POLAR_BEAR_HURT,
	ENTITY_POLAR_BEAR_STEP,
	ENTITY_POLAR_BEAR_WARNING,
	ENTITY_PUFFER_FISH_AMBIENT,
	ENTITY_PUFFER_FISH_BLOW_OUT,
	ENTITY_PUFFER_FISH_BLOW_UP,
	ENTITY_PUFFER_FISH_DEATH,
	ENTITY_PUFFER_FISH_FLOP,
	ENTITY_PUFFER_FISH_HURT,
	ENTITY_PUFFER_FISH_STING,
	ENTITY_RABBIT_AMBIENT,
	ENTITY_RABBIT_ATTACK,
	ENTITY_RABBIT_DEATH,
	ENTITY_RABBIT_HURT,
	ENTITY_RABBIT_JUMP,
	ENTITY_RAVAGER_AMBIENT,
	ENTITY_RAVAGER_ATTACK,
	ENTITY_RAVAGER_CELEBRATE,
	ENTITY_RAVAGER_DEATH,
	ENTITY_RAVAGER_HURT,
	ENTITY_RAVAGER_ROAR,
	ENTITY_RAVAGER_STEP,
	ENTITY_RAVAGER_STUNNED,
	ENTITY_SALMON_AMBIENT,
	ENTITY_SALMON_DEATH,
	ENTITY_SALMON_FLOP,
	ENTITY_SALMON_HURT,
	ENTITY_SHEEP_AMBIENT,
	ENTITY_SHEEP_DEATH,
	ENTITY_SHEEP_HURT,
	ENTITY_SHEEP_SHEAR,
	ENTITY_SHEEP_STEP,
	ENTITY_SHULKER_AMBIENT,
	ENTITY_SHULKER_BULLET_HIT,
	ENTITY_SHULKER_BULLET_HURT,
	ENTITY_SHULKER_CLOSE,
	ENTITY_SHULKER_DEATH,
	ENTITY_SHULKER_HURT,
	ENTITY_SHULKER_HURT_CLOSED,
	ENTITY_SHULKER_OPEN,
	ENTITY_SHULKER_SHOOT,
	ENTITY_SHULKER_TELEPORT,
	ENTITY_SILVERFISH_AMBIENT,
	ENTITY_SILVERFISH_DEATH,
	ENTITY_SILVERFISH_HURT,
	ENTITY_SILVERFISH_STEP,
	ENTITY_SKELETON_AMBIENT,
	ENTITY_SKELETON_CONVERTED_TO_STRAY,
	ENTITY_SKELETON_DEATH,
	ENTITY_SKELETON_HORSE_AMBIENT,
	ENTITY_SKELETON_HORSE_AMBIENT_WATER,
	ENTITY_SKELETON_HORSE_DEATH,
	ENTITY_SKELETON_HORSE_GALLOP_WATER,
	ENTITY_SKELETON_HORSE_HURT,
	ENTITY_SKELETON_HORSE_JUMP_WATER,
	ENTITY_SKELETON_HORSE_STEP_WATER,
	ENTITY_SKELETON_HORSE_SWIM,
	ENTITY_SKELETON_HURT,
	ENTITY_SKELETON_SHOOT,
	ENTITY_SKELETON_STEP,
	ENTITY_SLIME_ATTACK,
	ENTITY_SLIME_DEATH,
	ENTITY_SLIME_DEATH_SMALL,
	ENTITY_SLIME_HURT,
	ENTITY_SLIME_HURT_SMALL,
	ENTITY_SLIME_JUMP,
	ENTITY_SLIME_JUMP_SMALL,
	ENTITY_SLIME_SQUISH,
	ENTITY_SLIME_SQUISH_SMALL,
	ENTITY_SNOWBALL_THROW,
	ENTITY_SNOW_GOLEM_AMBIENT,
	ENTITY_SNOW_GOLEM_DEATH,
	ENTITY_SNOW_GOLEM_HURT,
	ENTITY_SNOW_GOLEM_SHEAR,
	ENTITY_SNOW_GOLEM_SHOOT,
	ENTITY_SPIDER_AMBIENT,
	ENTITY_SPIDER_DEATH,
	ENTITY_SPIDER_HURT,
	ENTITY_SPIDER_STEP,
	ENTITY_SPLASH_POTION_BREAK,
	ENTITY_SPLASH_POTION_THROW,
	ENTITY_SQUID_AMBIENT,
	ENTITY_SQUID_DEATH,
	ENTITY_SQUID_HURT,
	ENTITY_SQUID_SQUIRT,
	ENTITY_STRAY_AMBIENT,
	ENTITY_STRAY_DEATH,
	ENTITY_STRAY_HURT,
	ENTITY_STRAY_STEP,
	ENTITY_STRIDER_AMBIENT,
	ENTITY_STRIDER_DEATH,
	ENTITY_STRIDER_EAT,
	ENTITY_STRIDER_HAPPY,
	ENTITY_STRIDER_HURT,
	ENTITY_STRIDER_RETREAT,
	ENTITY_STRIDER_SADDLE,
	ENTITY_STRIDER_STEP,
	ENTITY_STRIDER_STEP_LAVA,
	ENTITY_TADPOLE_DEATH,
	ENTITY_TADPOLE_FLOP,
	ENTITY_TADPOLE_GROW_UP,
	ENTITY_TADPOLE_HURT,
	ENTITY_TNT_PRIMED,
	ENTITY_TROPICAL_FISH_AMBIENT,
	ENTITY_TROPICAL_FISH_DEATH,
	ENTITY_TROPICAL_FISH_FLOP,
	ENTITY_TROPICAL_FISH_HURT,
	ENTITY_TURTLE_AMBIENT_LAND,
	ENTITY_TURTLE_DEATH,
	ENTITY_TURTLE_DEATH_BABY,
	ENTITY_TURTLE_EGG_BREAK,
	ENTITY_TURTLE_EGG_CRACK,
	ENTITY_TURTLE_EGG_HATCH,
	ENTITY_TURTLE_HURT,
	ENTITY_TURTLE_HURT_BABY,
	ENTITY_TURTLE_LAY_EGG,
	ENTITY_TURTLE_SHAMBLE,
	ENTITY_TURTLE_SHAMBLE_BABY,
	ENTITY_TURTLE_SWIM,
	ENTITY_VEX_AMBIENT,
	ENTITY_VEX_CHARGE,
	ENTITY_VEX_DEATH,
	ENTITY_VEX_HURT,
	ENTITY_VILLAGER_AMBIENT,
	ENTITY_VILLAGER_CELEBRATE,
	ENTITY_VILLAGER_DEATH,
	ENTITY_VILLAGER_HURT,
	ENTITY_VILLAGER_NO,
	ENTITY_VILLAGER_TRADE,
	ENTITY_VILLAGER_WORK_ARMORER,
	ENTITY_VILLAGER_WORK_BUTCHER,
	ENTITY_VILLAGER_WORK_CARTOGRAPHER,
	ENTITY_VILLAGER_WORK_CLERIC,
	ENTITY_VILLAGER_WORK_FARMER,
	ENTITY_VILLAGER_WORK_FISHERMAN,
	ENTITY_VILLAGER_WORK_FLETCHER,
	ENTITY_VILLAGER_WORK_LEATHERWORKER,
	ENTITY_VILLAGER_WORK_LIBRARIAN,
	ENTITY_VILLAGER_WORK_MASON,
	ENTITY_VILLAGER_WORK_SHEPHERD,
	ENTITY_VILLAGER_WORK_TOOLSMITH,
	ENTITY_VILLAGER_WORK_WEAPONSMITH,
	ENTITY_VILLAGER_YES,
	ENTITY_VINDICATOR_AMBIENT,
	ENTITY_VINDICATOR_CELEBRATE,
	ENTITY_VINDICATOR_DEATH,
	ENTITY_VINDICATOR_HURT,
	ENTITY_WANDERING_TRADER_AMBIENT,
	ENTITY_WANDERING_TRADER_DEATH,
	ENTITY_WANDERING_TRADER_DISAPPEARED,
	ENTITY_WANDERING_TRADER_DRINK_MILK,
	ENTITY_WANDERING_TRADER_DRINK_POTION,
	ENTITY_WANDERING_TRADER_HURT,
	ENTITY_WANDERING_TRADER_NO,
	ENTITY_WANDERING_TRADER_REAPPEARED,
	ENTITY_WANDERING_TRADER_TRADE,
	ENTITY_WANDERING_TRADER_YES,
	ENTITY_WARDEN_AGITATED,
	ENTITY_WARDEN_AMBIENT,
	ENTITY_WARDEN_ANGRY,
	ENTITY_WARDEN_ATTACK_IMPACT,
	ENTITY_WARDEN_DEATH,
	ENTITY_WARDEN_DIG,
	ENTITY_WARDEN_EMERGE,
	ENTITY_WARDEN_HEARTBEAT,
	ENTITY_WARDEN_HURT,
	ENTITY_WARDEN_LISTENING,
	ENTITY_WARDEN_LISTENING_ANGRY,
	ENTITY_WARDEN_NEARBY_CLOSE,
	ENTITY_WARDEN_NEARBY_CLOSER,
	ENTITY_WARDEN_NEARBY_CLOSEST,
	ENTITY_WARDEN_ROAR,
	ENTITY_WARDEN_SNIFF,
	ENTITY_WARDEN_SONIC_BOOM,
	ENTITY_WARDEN_SONIC_CHARGE,
	ENTITY_WARDEN_STEP,
	ENTITY_WARDEN_TENDRIL_CLICKS,
	ENTITY_WITCH_AMBIENT,
	ENTITY_WITCH_CELEBRATE,
	ENTITY_WITCH_DEATH,
	ENTITY_WITCH_DRINK,
	ENTITY_WITCH_HURT,
	ENTITY_WITCH_THROW,
	ENTITY_WITHER_AMBIENT,
	ENTITY_WITHER_BREAK_BLOCK,
	ENTITY_WITHER_DEATH,
	ENTITY_WITHER_HURT,
	ENTITY_WITHER_SHOOT,
	ENTITY_WITHER_SKELETON_AMBIENT,
	ENTITY_WITHER_SKELETON_DEATH,
	ENTITY_WITHER_SKELETON_HURT,
	ENTITY_WITHER_SKELETON_STEP,
	ENTITY_WITHER_SPAWN,
	ENTITY_WOLF_AMBIENT,
	ENTITY_WOLF_DEATH,
	ENTITY_WOLF_GROWL,
	ENTITY_WOLF_HOWL,
	ENTITY_WOLF_HURT,
	ENTITY_WOLF_PANT,
	ENTITY_WOLF_SHAKE,
	ENTITY_WOLF_STEP,
	ENTITY_WOLF_WHINE,
	ENTITY_ZOGLIN_AMBIENT,
	ENTITY_ZOGLIN_ANGRY,
	ENTITY_ZOGLIN_ATTACK,
	ENTITY_ZOGLIN_DEATH,
	ENTITY_ZOGLIN_HURT,
	ENTITY_ZOGLIN_STEP,
	ENTITY_ZOMBIE_AMBIENT,
	ENTITY_ZOMBIE_ATTACK_IRON_DOOR,
	ENTITY_ZOMBIE_ATTACK_WOODEN_DOOR,
	ENTITY_ZOMBIE_BREAK_WOODEN_DOOR,
	ENTITY_ZOMBIE_CONVERTED_TO_DROWNED,
	ENTITY_ZOMBIE_DEATH,
	ENTITY_ZOMBIE_DESTROY_EGG,
	ENTITY_ZOMBIE_HORSE_AMBIENT,
	ENTITY_ZOMBIE_HORSE_DEATH,
	ENTITY_ZOMBIE_HORSE_HURT,
	ENTITY_ZOMBIE_HURT,
	ENTITY_ZOMBIE_INFECT,
	ENTITY_ZOMBIE_STEP,
	ENTITY_ZOMBIE_VILLAGER_AMBIENT,
	ENTITY_ZOMBIE_VILLAGER_CONVERTED,
	ENTITY_ZOMBIE_VILLAGER_CURE,
	ENTITY_ZOMBIE_VILLAGER_DEATH,
	ENTITY_ZOMBIE_VILLAGER_HURT,
	ENTITY_ZOMBIE_VILLAGER_STEP,
	ENTITY_ZOMBIFIED_PIGLIN_AMBIENT,
	ENTITY_ZOMBIFIED_PIGLIN_ANGRY,
	ENTITY_ZOMBIFIED_PIGLIN_DEATH,
	ENTITY_ZOMBIFIED_PIGLIN_HURT,
	EVENT_RAID_HORN,
	ITEM_ARMOR_EQUIP_CHAIN,
	ITEM_ARMOR_EQUIP_DIAMOND,
	ITEM_ARMOR_EQUIP_ELYTRA,
	ITEM_ARMOR_EQUIP_GENERIC,
	ITEM_ARMOR_EQUIP_GOLD,
	ITEM_ARMOR_EQUIP_IRON,
	ITEM_ARMOR_EQUIP_LEATHER,
	ITEM_ARMOR_EQUIP_NETHERITE,
	ITEM_ARMOR_EQUIP_TURTLE,
	ITEM_AXE_SCRAPE,
	ITEM_AXE_STRIP,
	ITEM_AXE_WAX_OFF,
	ITEM_BONE_MEAL_USE,
	ITEM_BOOK_PAGE_TURN,
	ITEM_BOOK_PUT,
	ITEM_BOTTLE_EMPTY,
	ITEM_BOTTLE_FILL,
	ITEM_BOTTLE_FILL_DRAGONBREATH,
	ITEM_BUCKET_EMPTY,
	ITEM_BUCKET_EMPTY_AXOLOTL,
	ITEM_BUCKET_EMPTY_FISH,
	ITEM_BUCKET_EMPTY_LAVA,
	ITEM_BUCKET_EMPTY_POWDER_SNOW,
	ITEM_BUCKET_EMPTY_TADPOLE,
	ITEM_BUCKET_FILL,
	ITEM_BUCKET_FILL_AXOLOTL,
	ITEM_BUCKET_FILL_FISH,
	ITEM_BUCKET_FILL_LAVA,
	ITEM_BUCKET_FILL_POWDER_SNOW,
	ITEM_BUCKET_FILL_TADPOLE,
	ITEM_BUNDLE_DROP_CONTENTS,
	ITEM_BUNDLE_INSERT,
	ITEM_BUNDLE_REMOVE_ONE,
	ITEM_CHORUS_FRUIT_TELEPORT,
	ITEM_CROP_PLANT,
	ITEM_CROSSBOW_HIT,
	ITEM_CROSSBOW_LOADING_END,
	ITEM_CROSSBOW_LOADING_MIDDLE,
	ITEM_CROSSBOW_LOADING_START,
	ITEM_CROSSBOW_QUICK_CHARGE_1,
	ITEM_CROSSBOW_QUICK_CHARGE_2,
	ITEM_CROSSBOW_QUICK_CHARGE_3,
	ITEM_CROSSBOW_SHOOT,
	ITEM_DYE_USE,
	ITEM_ELYTRA_FLYING,
	ITEM_FIRECHARGE_USE,
	ITEM_FLINTANDSTEEL_USE,
	ITEM_GLOW_INK_SAC_USE,
	ITEM_GOAT_HORN_PLAY,
	ITEM_GOAT_HORN_SOUND_0,
	ITEM_GOAT_HORN_SOUND_1,
	ITEM_GOAT_HORN_SOUND_2,
	ITEM_GOAT_HORN_SOUND_3,
	ITEM_GOAT_HORN_SOUND_4,
	ITEM_GOAT_HORN_SOUND_5,
	ITEM_GOAT_HORN_SOUND_6,
	ITEM_GOAT_HORN_SOUND_7,
	ITEM_HOE_TILL,
	ITEM_HONEYCOMB_WAX_ON,
	ITEM_HONEY_BOTTLE_DRINK,
	ITEM_INK_SAC_USE,
	ITEM_LODESTONE_COMPASS_LOCK,
	ITEM_NETHER_WART_PLANT,
	ITEM_SHIELD_BLOCK,
	ITEM_SHIELD_BREAK,
	ITEM_SHOVEL_FLATTEN,
	ITEM_SPYGLASS_STOP_USING,
	ITEM_SPYGLASS_USE,
	ITEM_TOTEM_USE,
	ITEM_TRIDENT_HIT,
	ITEM_TRIDENT_HIT_GROUND,
	ITEM_TRIDENT_RETURN,
	ITEM_TRIDENT_RIPTIDE_1,
	ITEM_TRIDENT_RIPTIDE_2,
	ITEM_TRIDENT_RIPTIDE_3,
	ITEM_TRIDENT_THROW,
	ITEM_TRIDENT_THUNDER,
	MUSIC_CREATIVE,
	MUSIC_CREDITS,
	MUSIC_DISC_11,
	MUSIC_DISC_13,
	MUSIC_DISC_5,
	MUSIC_DISC_BLOCKS,
	MUSIC_DISC_CAT,
	MUSIC_DISC_CHIRP,
	MUSIC_DISC_FAR,
	MUSIC_DISC_MALL,
	MUSIC_DISC_MELLOHI,
	MUSIC_DISC_OTHERSIDE,
	MUSIC_DISC_PIGSTEP,
	MUSIC_DISC_STAL,
	MUSIC_DISC_STRAD,
	MUSIC_DISC_WAIT,
	MUSIC_DISC_WARD,
	MUSIC_DRAGON,
	MUSIC_END,
	MUSIC_GAME,
	MUSIC_MENU,
	MUSIC_NETHER_BASALT_DELTAS,
	MUSIC_NETHER_CRIMSON_FOREST,
	MUSIC_NETHER_NETHER_WASTES,
	MUSIC_NETHER_SOUL_SAND_VALLEY,
	MUSIC_NETHER_WARPED_FOREST,
	MUSIC_OVERWORLD_DEEP_DARK,
	MUSIC_OVERWORLD_DRIPSTONE_CAVES,
	MUSIC_OVERWORLD_FROZEN_PEAKS,
	MUSIC_OVERWORLD_GROVE,
	MUSIC_OVERWORLD_JAGGED_PEAKS,
	MUSIC_OVERWORLD_JUNGLE_AND_FOREST,
	MUSIC_OVERWORLD_LUSH_CAVES,
	MUSIC_OVERWORLD_MEADOW,
	MUSIC_OVERWORLD_OLD_GROWTH_TAIGA,
	MUSIC_OVERWORLD_SNOWY_SLOPES,
	MUSIC_OVERWORLD_STONY_PEAKS,
	MUSIC_OVERWORLD_SWAMP,
	MUSIC_UNDER_WATER,
	PARTICLE_SOUL_ESCAPE,
	UI_BUTTON_CLICK,
	UI_CARTOGRAPHY_TABLE_TAKE_RESULT,
	UI_LOOM_SELECT_PATTERN,
	UI_LOOM_TAKE_RESULT,
	UI_STONECUTTER_SELECT_RECIPE,
	UI_STONECUTTER_TAKE_RESULT,
	UI_TOAST_CHALLENGE_COMPLETE,
	UI_TOAST_IN,
	UI_TOAST_OUT,
	WEATHER_RAIN,
	WEATHER_RAIN_ABOVE,
}
namespace Sound {
	function values(): Sound[]
	function valueOf(arg0: String): Sound
	function getKey(): NamespacedKey
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum EntityType {
	DROPPED_ITEM,
	EXPERIENCE_ORB,
	AREA_EFFECT_CLOUD,
	ELDER_GUARDIAN,
	WITHER_SKELETON,
	STRAY,
	EGG,
	LEASH_HITCH,
	PAINTING,
	ARROW,
	SNOWBALL,
	FIREBALL,
	SMALL_FIREBALL,
	ENDER_PEARL,
	ENDER_SIGNAL,
	SPLASH_POTION,
	THROWN_EXP_BOTTLE,
	ITEM_FRAME,
	WITHER_SKULL,
	PRIMED_TNT,
	FALLING_BLOCK,
	FIREWORK,
	HUSK,
	SPECTRAL_ARROW,
	SHULKER_BULLET,
	DRAGON_FIREBALL,
	ZOMBIE_VILLAGER,
	SKELETON_HORSE,
	ZOMBIE_HORSE,
	ARMOR_STAND,
	DONKEY,
	MULE,
	EVOKER_FANGS,
	EVOKER,
	VEX,
	VINDICATOR,
	ILLUSIONER,
	MINECART_COMMAND,
	BOAT,
	MINECART,
	MINECART_CHEST,
	MINECART_FURNACE,
	MINECART_TNT,
	MINECART_HOPPER,
	MINECART_MOB_SPAWNER,
	CREEPER,
	SKELETON,
	SPIDER,
	GIANT,
	ZOMBIE,
	SLIME,
	GHAST,
	ZOMBIFIED_PIGLIN,
	ENDERMAN,
	CAVE_SPIDER,
	SILVERFISH,
	BLAZE,
	MAGMA_CUBE,
	ENDER_DRAGON,
	WITHER,
	BAT,
	WITCH,
	ENDERMITE,
	GUARDIAN,
	SHULKER,
	PIG,
	SHEEP,
	COW,
	CHICKEN,
	SQUID,
	WOLF,
	MUSHROOM_COW,
	SNOWMAN,
	OCELOT,
	IRON_GOLEM,
	HORSE,
	RABBIT,
	POLAR_BEAR,
	LLAMA,
	LLAMA_SPIT,
	PARROT,
	VILLAGER,
	ENDER_CRYSTAL,
	TURTLE,
	PHANTOM,
	TRIDENT,
	COD,
	SALMON,
	PUFFERFISH,
	TROPICAL_FISH,
	DROWNED,
	DOLPHIN,
	CAT,
	PANDA,
	PILLAGER,
	RAVAGER,
	TRADER_LLAMA,
	WANDERING_TRADER,
	FOX,
	BEE,
	HOGLIN,
	PIGLIN,
	STRIDER,
	ZOGLIN,
	PIGLIN_BRUTE,
	AXOLOTL,
	GLOW_ITEM_FRAME,
	GLOW_SQUID,
	GOAT,
	MARKER,
	ALLAY,
	CHEST_BOAT,
	FROG,
	TADPOLE,
	WARDEN,
	FISHING_HOOK,
	LIGHTNING,
	PLAYER,
	UNKNOWN,
}
namespace EntityType {
	function getName(): String
	function values(): EntityType[]
	function valueOf(arg0: String): EntityType
	function getKey(): NamespacedKey
	function isAlive(): boolean
	function fromName(arg0: String): EntityType
	function getEntityClass(): Class
	function getTypeId(): short
	function fromId(arg0: int): EntityType
	function isSpawnable(): boolean
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Result {
	ALLOWED,
	KICK_FULL,
	KICK_BANNED,
	KICK_WHITELIST,
	KICK_OTHER,
}
namespace Result {
	function values(): Result[]
	function valueOf(arg0: String): Result
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Variant {
	RED,
	BLUE,
	GREEN,
	CYAN,
	GRAY,
}
namespace Variant {
	function values(): Variant[]
	function valueOf(arg0: String): Variant
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Rotation {
	NONE,
	CLOCKWISE_45,
	CLOCKWISE,
	CLOCKWISE_135,
	FLIPPED,
	FLIPPED_45,
	COUNTER_CLOCKWISE,
	COUNTER_CLOCKWISE_45,
}
namespace Rotation {
	function values(): Rotation[]
	function valueOf(arg0: String): Rotation
	function rotateCounterClockwise(): Rotation
	function rotateClockwise(): Rotation
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Face {
	FLOOR,
	WALL,
	CEILING,
}
namespace Face {
	function values(): Face[]
	function valueOf(arg0: String): Face
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum FluidCollisionMode {
	NEVER,
	SOURCE_ONLY,
	ALWAYS,
}
namespace FluidCollisionMode {
	function values(): FluidCollisionMode[]
	function valueOf(arg0: String): FluidCollisionMode
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Result {
	ALLOWED,
	KICK_FULL,
	KICK_BANNED,
	KICK_WHITELIST,
	KICK_OTHER,
}
namespace Result {
	function values(): Result[]
	function valueOf(arg0: String): Result
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum DisplaySlot {
	BELOW_NAME,
	PLAYER_LIST,
	SIDEBAR,
}
namespace DisplaySlot {
	function values(): DisplaySlot[]
	function valueOf(arg0: String): DisplaySlot
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum ClickType {
	LEFT,
	SHIFT_LEFT,
	RIGHT,
	SHIFT_RIGHT,
	WINDOW_BORDER_LEFT,
	WINDOW_BORDER_RIGHT,
	MIDDLE,
	NUMBER_KEY,
	DOUBLE_CLICK,
	DROP,
	CONTROL_DROP,
	CREATIVE,
	SWAP_OFFHAND,
	UNKNOWN,
}
namespace ClickType {
	function values(): ClickType[]
	function valueOf(arg0: String): ClickType
	function isCreativeAction(): boolean
	function isRightClick(): boolean
	function isLeftClick(): boolean
	function isShiftClick(): boolean
	function isKeyboardClick(): boolean
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Color {
	WHITE,
	CREAMY,
	CHESTNUT,
	BROWN,
	BLACK,
	GRAY,
	DARK_BROWN,
}
namespace Color {
	function values(): Color[]
	function valueOf(arg0: String): Color
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum CreativeCategory {
	BUILDING_BLOCKS,
	DECORATIONS,
	REDSTONE,
	TRANSPORTATION,
	MISC,
	FOOD,
	TOOLS,
	COMBAT,
	BREWING,
}
namespace CreativeCategory {
	function values(): CreativeCategory[]
	function valueOf(arg0: String): CreativeCategory
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Tone {
	G,
	A,
	B,
	C,
	D,
	E,
	F,
}
namespace Tone {
	function values(): Tone[]
	function valueOf(arg0: String): Tone
	function getId(arg0: boolean): byte
	function getId(): byte
	function getById(arg0: byte): Tone
	function isSharpable(): boolean
	function isSharped(arg0: byte): boolean
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Action {
	LEFT_CLICK_BLOCK,
	RIGHT_CLICK_BLOCK,
	LEFT_CLICK_AIR,
	RIGHT_CLICK_AIR,
	PHYSICAL,
}
namespace Action {
	function values(): Action[]
	function valueOf(arg0: String): Action
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum ChangeReason {
	LOSING_JOB,
	EMPLOYED,
}
namespace ChangeReason {
	function values(): ChangeReason[]
	function valueOf(arg0: String): ChangeReason
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum DamageModifier {
	BASE,
	HARD_HAT,
	BLOCKING,
	ARMOR,
	RESISTANCE,
	MAGIC,
	ABSORPTION,
}
namespace DamageModifier {
	function values(): DamageModifier[]
	function valueOf(arg0: String): DamageModifier
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Mirror {
	NONE,
	LEFT_RIGHT,
	FRONT_BACK,
}
namespace Mirror {
	function values(): Mirror[]
	function valueOf(arg0: String): Mirror
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum GameMode {
	CREATIVE,
	SURVIVAL,
	ADVENTURE,
	SPECTATOR,
}
namespace GameMode {
	function values(): GameMode[]
	function valueOf(arg0: String): GameMode
	function getValue(): int
	function getByValue(arg0: int): GameMode
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Effect {
	CLICK2,
	CLICK1,
	BOW_FIRE,
	DOOR_TOGGLE,
	IRON_DOOR_TOGGLE,
	TRAPDOOR_TOGGLE,
	IRON_TRAPDOOR_TOGGLE,
	FENCE_GATE_TOGGLE,
	DOOR_CLOSE,
	IRON_DOOR_CLOSE,
	TRAPDOOR_CLOSE,
	IRON_TRAPDOOR_CLOSE,
	FENCE_GATE_CLOSE,
	EXTINGUISH,
	RECORD_PLAY,
	GHAST_SHRIEK,
	GHAST_SHOOT,
	BLAZE_SHOOT,
	ZOMBIE_CHEW_WOODEN_DOOR,
	ZOMBIE_CHEW_IRON_DOOR,
	ZOMBIE_DESTROY_DOOR,
	SMOKE,
	STEP_SOUND,
	POTION_BREAK,
	INSTANT_POTION_BREAK,
	ENDER_SIGNAL,
	MOBSPAWNER_FLAMES,
	BREWING_STAND_BREW,
	CHORUS_FLOWER_GROW,
	CHORUS_FLOWER_DEATH,
	PORTAL_TRAVEL,
	ENDEREYE_LAUNCH,
	FIREWORK_SHOOT,
	VILLAGER_PLANT_GROW,
	DRAGON_BREATH,
	ANVIL_BREAK,
	ANVIL_USE,
	ANVIL_LAND,
	ENDERDRAGON_SHOOT,
	WITHER_BREAK_BLOCK,
	WITHER_SHOOT,
	ZOMBIE_INFECT,
	ZOMBIE_CONVERTED_VILLAGER,
	BAT_TAKEOFF,
	END_GATEWAY_SPAWN,
	ENDERDRAGON_GROWL,
	PHANTOM_BITE,
	ZOMBIE_CONVERTED_TO_DROWNED,
	HUSK_CONVERTED_TO_ZOMBIE,
	GRINDSTONE_USE,
	BOOK_PAGE_TURN,
	SMITHING_TABLE_USE,
	POINTED_DRIPSTONE_LAND,
	POINTED_DRIPSTONE_DRIP_LAVA_INTO_CAULDRON,
	POINTED_DRIPSTONE_DRIP_WATER_INTO_CAULDRON,
	SKELETON_CONVERTED_TO_STRAY,
	COMPOSTER_FILL_ATTEMPT,
	LAVA_INTERACT,
	REDSTONE_TORCH_BURNOUT,
	END_PORTAL_FRAME_FILL,
	DRIPPING_DRIPSTONE,
	BONE_MEAL_USE,
	ENDER_DRAGON_DESTROY_BLOCK,
	SPONGE_DRY,
	ELECTRIC_SPARK,
	COPPER_WAX_ON,
	COPPER_WAX_OFF,
	OXIDISED_COPPER_SCRAPE,
}
namespace Effect {
	function values(): Effect[]
	function valueOf(arg0: String): Effect
	function getId(): int
	function getType(): Type
	function getById(arg0: int): Effect
	function getData(): Class
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	TABBY,
	BLACK,
	RED,
	SIAMESE,
	BRITISH_SHORTHAIR,
	CALICO,
	PERSIAN,
	RAGDOLL,
	WHITE,
	JELLIE,
	ALL_BLACK,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum DragType {
	SINGLE,
	EVEN,
}
namespace DragType {
	function values(): DragType[]
	function valueOf(arg0: String): DragType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Height {
	NONE,
	LOW,
	TALL,
}
namespace Height {
	function values(): Height[]
	function valueOf(arg0: String): Height
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum HookState {
	UNHOOKED,
	HOOKED_ENTITY,
	BOBBING,
}
namespace HookState {
	function values(): HookState[]
	function valueOf(arg0: String): HookState
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	RED,
	SNOW,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Attachment {
	FLOOR,
	CEILING,
	SINGLE_WALL,
	DOUBLE_WALL,
}
namespace Attachment {
	function values(): Attachment[]
	function valueOf(arg0: String): Attachment
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Orientation {
	DOWN_EAST,
	DOWN_NORTH,
	DOWN_SOUTH,
	DOWN_WEST,
	UP_EAST,
	UP_NORTH,
	UP_SOUTH,
	UP_WEST,
	WEST_UP,
	EAST_UP,
	NORTH_UP,
	SOUTH_UP,
}
namespace Orientation {
	function values(): Orientation[]
	function valueOf(arg0: String): Orientation
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum BarStyle {
	SOLID,
	SEGMENTED_6,
	SEGMENTED_10,
	SEGMENTED_12,
	SEGMENTED_20,
}
namespace BarStyle {
	function values(): BarStyle[]
	function valueOf(arg0: String): BarStyle
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	WHITE_POINTER,
	GREEN_POINTER,
	RED_POINTER,
	BLUE_POINTER,
	WHITE_CROSS,
	RED_MARKER,
	WHITE_CIRCLE,
	SMALL_WHITE_CIRCLE,
	MANSION,
	TEMPLE,
	BANNER_WHITE,
	BANNER_ORANGE,
	BANNER_MAGENTA,
	BANNER_LIGHT_BLUE,
	BANNER_YELLOW,
	BANNER_LIME,
	BANNER_PINK,
	BANNER_GRAY,
	BANNER_LIGHT_GRAY,
	BANNER_CYAN,
	BANNER_PURPLE,
	BANNER_BLUE,
	BANNER_BROWN,
	BANNER_GREEN,
	BANNER_RED,
	BANNER_BLACK,
	RED_X,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function getValue(): byte
	function byValue(arg0: byte): Type
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Mode {
	COMPARE,
	SUBTRACT,
}
namespace Mode {
	function values(): Mode[]
	function valueOf(arg0: String): Mode
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum SpawnCategory {
	MONSTER,
	ANIMAL,
	WATER_ANIMAL,
	WATER_AMBIENT,
	WATER_UNDERGROUND_CREATURE,
	AMBIENT,
	AXOLOTL,
	MISC,
}
namespace SpawnCategory {
	function values(): SpawnCategory[]
	function valueOf(arg0: String): SpawnCategory
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum SkipReason {
	COMMAND,
	CUSTOM,
	NIGHT_SKIP,
}
namespace SkipReason {
	function values(): SkipReason[]
	function valueOf(arg0: String): SkipReason
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Style {
	NONE,
	WHITE,
	WHITEFIELD,
	WHITE_DOTS,
	BLACK_DOTS,
}
namespace Style {
	function values(): Style[]
	function valueOf(arg0: String): Style
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Head {
	CENTER,
	LEFT,
	RIGHT,
}
namespace Head {
	function values(): Head[]
	function valueOf(arg0: String): Head
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum WeatherType {
	DOWNFALL,
	CLEAR,
}
namespace WeatherType {
	function values(): WeatherType[]
	function valueOf(arg0: String): WeatherType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	BALL,
	BALL_LARGE,
	STAR,
	BURST,
	CREEPER,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Attribute {
	GENERIC_MAX_HEALTH,
	GENERIC_FOLLOW_RANGE,
	GENERIC_KNOCKBACK_RESISTANCE,
	GENERIC_MOVEMENT_SPEED,
	GENERIC_FLYING_SPEED,
	GENERIC_ATTACK_DAMAGE,
	GENERIC_ATTACK_KNOCKBACK,
	GENERIC_ATTACK_SPEED,
	GENERIC_ARMOR,
	GENERIC_ARMOR_TOUGHNESS,
	GENERIC_LUCK,
	HORSE_JUMP_STRENGTH,
	ZOMBIE_SPAWN_REINFORCEMENTS,
}
namespace Attribute {
	function values(): Attribute[]
	function valueOf(arg0: String): Attribute
	function getKey(): NamespacedKey
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Generation {
	ORIGINAL,
	COPY_OF_ORIGINAL,
	COPY_OF_COPY,
	TATTERED,
}
namespace Generation {
	function values(): Generation[]
	function valueOf(arg0: String): Generation
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum RemoveCause {
	ENTITY,
	EXPLOSION,
	OBSTRUCTION,
	PHYSICS,
	DEFAULT,
}
namespace RemoveCause {
	function values(): RemoveCause[]
	function valueOf(arg0: String): RemoveCause
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum InventoryAction {
	NOTHING,
	PICKUP_ALL,
	PICKUP_SOME,
	PICKUP_HALF,
	PICKUP_ONE,
	PLACE_ALL,
	PLACE_SOME,
	PLACE_ONE,
	SWAP_WITH_CURSOR,
	DROP_ALL_CURSOR,
	DROP_ONE_CURSOR,
	DROP_ALL_SLOT,
	DROP_ONE_SLOT,
	MOVE_TO_OTHER_INVENTORY,
	HOTBAR_MOVE_AND_READD,
	HOTBAR_SWAP,
	CLONE_STACK,
	COLLECT_TO_CURSOR,
	UNKNOWN,
}
namespace InventoryAction {
	function values(): InventoryAction[]
	function valueOf(arg0: String): InventoryAction
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum InventoryType {
	CHEST,
	DISPENSER,
	DROPPER,
	FURNACE,
	WORKBENCH,
	CRAFTING,
	ENCHANTING,
	BREWING,
	PLAYER,
	CREATIVE,
	MERCHANT,
	ENDER_CHEST,
	ANVIL,
	SMITHING,
	BEACON,
	HOPPER,
	SHULKER_BOX,
	BARREL,
	BLAST_FURNACE,
	LECTERN,
	SMOKER,
	LOOM,
	CARTOGRAPHY,
	GRINDSTONE,
	STONECUTTER,
	COMPOSTER,
}
namespace InventoryType {
	function values(): InventoryType[]
	function valueOf(arg0: String): InventoryType
	function getDefaultSize(): int
	function getDefaultTitle(): String
	function isCreatable(): boolean
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum State {
	FISHING,
	CAUGHT_FISH,
	CAUGHT_ENTITY,
	IN_GROUND,
	FAILED_ATTEMPT,
	REEL_IN,
	BITE,
}
namespace State {
	function values(): State[]
	function valueOf(arg0: String): State
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Cause {
	COMMAND,
	CUSTOM,
	SPAWNER,
	TRIDENT,
	TRAP,
	WEATHER,
	UNKNOWN,
}
namespace Cause {
	function values(): Cause[]
	function valueOf(arg0: String): Cause
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum ChangeReason {
	BUCKET_FILL,
	BUCKET_EMPTY,
	BOTTLE_FILL,
	BOTTLE_EMPTY,
	BANNER_WASH,
	ARMOR_WASH,
	SHULKER_WASH,
	EXTINGUISH,
	EVAPORATE,
	NATURAL_FILL,
	UNKNOWN,
}
namespace ChangeReason {
	function values(): ChangeReason[]
	function valueOf(arg0: String): ChangeReason
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Result {
	DENY,
	DEFAULT,
	ALLOW,
}
namespace Result {
	function values(): Result[]
	function valueOf(arg0: String): Result
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Variant {
	LUCY,
	WILD,
	GOLD,
	CYAN,
	BLUE,
}
namespace Variant {
	function values(): Variant[]
	function valueOf(arg0: String): Variant
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum SandstoneType {
	CRACKED,
	GLYPHED,
	SMOOTH,
}
namespace SandstoneType {
	function values(): SandstoneType[]
	function valueOf(arg0: String): SandstoneType
	function getByData(arg0: byte): SandstoneType
	function getData(): byte
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum WorldType {
	NORMAL,
	FLAT,
	LARGE_BIOMES,
	AMPLIFIED,
}
namespace WorldType {
	function getName(): String
	function values(): WorldType[]
	function valueOf(arg0: String): WorldType
	function getByName(arg0: String): WorldType
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Leaves {
	NONE,
	SMALL,
	LARGE,
}
namespace Leaves {
	function values(): Leaves[]
	function valueOf(arg0: String): Leaves
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Particle {
	EXPLOSION_NORMAL,
	EXPLOSION_LARGE,
	EXPLOSION_HUGE,
	FIREWORKS_SPARK,
	WATER_BUBBLE,
	WATER_SPLASH,
	WATER_WAKE,
	SUSPENDED,
	SUSPENDED_DEPTH,
	CRIT,
	CRIT_MAGIC,
	SMOKE_NORMAL,
	SMOKE_LARGE,
	SPELL,
	SPELL_INSTANT,
	SPELL_MOB,
	SPELL_MOB_AMBIENT,
	SPELL_WITCH,
	DRIP_WATER,
	DRIP_LAVA,
	VILLAGER_ANGRY,
	VILLAGER_HAPPY,
	TOWN_AURA,
	NOTE,
	PORTAL,
	ENCHANTMENT_TABLE,
	FLAME,
	LAVA,
	CLOUD,
	REDSTONE,
	SNOWBALL,
	SNOW_SHOVEL,
	SLIME,
	HEART,
	ITEM_CRACK,
	BLOCK_CRACK,
	BLOCK_DUST,
	WATER_DROP,
	MOB_APPEARANCE,
	DRAGON_BREATH,
	END_ROD,
	DAMAGE_INDICATOR,
	SWEEP_ATTACK,
	FALLING_DUST,
	TOTEM,
	SPIT,
	SQUID_INK,
	BUBBLE_POP,
	CURRENT_DOWN,
	BUBBLE_COLUMN_UP,
	NAUTILUS,
	DOLPHIN,
	SNEEZE,
	CAMPFIRE_COSY_SMOKE,
	CAMPFIRE_SIGNAL_SMOKE,
	COMPOSTER,
	FLASH,
	FALLING_LAVA,
	LANDING_LAVA,
	FALLING_WATER,
	DRIPPING_HONEY,
	FALLING_HONEY,
	LANDING_HONEY,
	FALLING_NECTAR,
	SOUL_FIRE_FLAME,
	ASH,
	CRIMSON_SPORE,
	WARPED_SPORE,
	SOUL,
	DRIPPING_OBSIDIAN_TEAR,
	FALLING_OBSIDIAN_TEAR,
	LANDING_OBSIDIAN_TEAR,
	REVERSE_PORTAL,
	WHITE_ASH,
	DUST_COLOR_TRANSITION,
	VIBRATION,
	FALLING_SPORE_BLOSSOM,
	SPORE_BLOSSOM_AIR,
	SMALL_FLAME,
	SNOWFLAKE,
	DRIPPING_DRIPSTONE_LAVA,
	FALLING_DRIPSTONE_LAVA,
	DRIPPING_DRIPSTONE_WATER,
	FALLING_DRIPSTONE_WATER,
	GLOW_SQUID_INK,
	GLOW,
	WAX_ON,
	WAX_OFF,
	ELECTRIC_SPARK,
	SCRAPE,
	SONIC_BOOM,
	SCULK_SOUL,
	SCULK_CHARGE,
	SCULK_CHARGE_POP,
	SHRIEK,
	BLOCK_MARKER,
	LEGACY_BLOCK_CRACK,
	LEGACY_BLOCK_DUST,
	LEGACY_FALLING_DUST,
}
namespace Particle {
	function values(): Particle[]
	function valueOf(arg0: String): Particle
	function getDataType(): Class
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum SkinModel {
	CLASSIC,
	SLIM,
}
namespace SkinModel {
	function values(): SkinModel[]
	function valueOf(arg0: String): SkinModel
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Action {
	ADDED,
	CHANGED,
	CLEARED,
	REMOVED,
}
namespace Action {
	function values(): Action[]
	function valueOf(arg0: String): Action
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum AdvancementDisplayType {
	TASK,
	CHALLENGE,
	GOAL,
}
namespace AdvancementDisplayType {
	function values(): AdvancementDisplayType[]
	function valueOf(arg0: String): AdvancementDisplayType
	function getColor(): ChatColor
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Cause {
	AREA_EFFECT_CLOUD,
	ARROW,
	ATTACK,
	AXOLOTL,
	BEACON,
	COMMAND,
	CONDUIT,
	CONVERSION,
	DEATH,
	DOLPHIN,
	EXPIRATION,
	FOOD,
	ILLUSION,
	MILK,
	PATROL_CAPTAIN,
	PLUGIN,
	POTION_DRINK,
	POTION_SPLASH,
	SPIDER_SPAWN,
	TOTEM,
	TURTLE_HELMET,
	UNKNOWN,
	VILLAGER_TRADE,
	WARDEN,
	WITHER_ROSE,
}
namespace Cause {
	function values(): Cause[]
	function valueOf(arg0: String): Cause
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Operation {
	ADD_NUMBER,
	ADD_SCALAR,
	MULTIPLY_SCALAR_1,
}
namespace Operation {
	function values(): Operation[]
	function valueOf(arg0: String): Operation
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum OptionStatus {
	ALWAYS,
	NEVER,
	FOR_OTHER_TEAMS,
	FOR_OWN_TEAM,
}
namespace OptionStatus {
	function values(): OptionStatus[]
	function valueOf(arg0: String): OptionStatus
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum ChatColor {
	BLACK,
	DARK_BLUE,
	DARK_GREEN,
	DARK_AQUA,
	DARK_RED,
	DARK_PURPLE,
	GOLD,
	GRAY,
	DARK_GRAY,
	BLUE,
	GREEN,
	AQUA,
	RED,
	LIGHT_PURPLE,
	YELLOW,
	WHITE,
	MAGIC,
	BOLD,
	STRIKETHROUGH,
	UNDERLINE,
	ITALIC,
	RESET,
}
namespace ChatColor {
	function toString(): String
	function values(): ChatColor[]
	function getChar(): char
	function valueOf(arg0: String): ChatColor
	function isColor(): boolean
	function translateAlternateColorCodes(arg0: char, arg1: String): String
	function isFormat(): boolean
	function asBungee(): ChatColor
	function getLastColors(arg0: String): String
	function getByChar(arg0: char): ChatColor
	function getByChar(arg0: String): ChatColor
	function stripColor(arg0: String): String
	function name(): String
	function equals(arg0: Object): boolean
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Variant {
	RED,
	BROWN,
}
namespace Variant {
	function values(): Variant[]
	function valueOf(arg0: String): Variant
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum Type {
	WILD_OCELOT,
	BLACK_CAT,
	RED_CAT,
	SIAMESE_CAT,
}
namespace Type {
	function values(): Type[]
	function valueOf(arg0: String): Type
	function getId(): int
	function getType(arg0: int): Type
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
declare enum RaidStatus {
	ONGOING,
	VICTORY,
	LOSS,
	STOPPED,
}
namespace RaidStatus {
	function values(): RaidStatus[]
	function valueOf(arg0: String): RaidStatus
	function name(): String
	function equals(arg0: Object): boolean
	function toString(): String
	function hashCode(): int
	function compareTo(arg0: Object): int
	function compareTo(arg0: Enum): int
	function valueOf(arg0: Class, arg1: String): Enum
	function describeConstable(): Optional
	function getDeclaringClass(): Class
	function ordinal(): int
	function wait(arg0: long, arg1: int): void
	function wait(): void
	function wait(arg0: long): void
	function getClass(): Class
	function notify(): void
	function notifyAll(): void
}
type ListenerFunction<Type> = (event: Type) => void
type CommandFunction = (player: Player, args: any) => void

declare enum Color {
	BLACK,
	DARK_BLUE,
	DARK_GREEN,
	DARK_AQUA,
	DARK_RED,
	DARK_PURPLE,
	GOLD,
	GRAY,
	DARK_GRAY,
	BLUE,
	GREEN,
	AQUA,
	RED,
	LIGHT_PURPLE,
	YELLOW,
	WHITE,
	MAGIC,
	BOLD,
	STRIKETHROUGH,
	UNDERLINE,
	ITALIC,
	RESET,
}

declare namespace blaze {
    function onEvent<Type>(event: Type, listener: ListenerFunction<Type>): void
    function onCommand(commandName: string, listener: CommandFunction): void
}
